(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TreactorcontrolrodB" defined at nucleartrain.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TreactorcontrolrodB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type treactorcontrolrodB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = treactorcontrolrodB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type treactorcontrolrodB__ref =
  { mutable treactorcontrolrodB__content : treactorcontrolrodB }
 
 function treactorcontrolrodB__ref_treactorcontrolrodB__content__projection 
   (a : treactorcontrolrodB__ref) : treactorcontrolrodB =
  a.treactorcontrolrodB__content
 
 meta "model_projection" function treactorcontrolrodB__ref_treactorcontrolrodB__content__projection
 
 meta "inline:no" function treactorcontrolrodB__ref_treactorcontrolrodB__content__projection
 
 val treactorcontrolrodB__havoc 
   (x : treactorcontrolrodB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TreactorcontrolrodB" defined at nucleartrain.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TreactorcontrolrodB__rep
 use        Nucleartrain__TreactorcontrolrodB as Nucleartrain__TreactorcontrolrodB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__TreactorcontrolrodB.treactorcontrolrodB) : int =
  (Nucleartrain__TreactorcontrolrodB.treactorcontrolrodB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__TreactorcontrolrodB.treactorcontrolrodB, 
 predicate in_range = Nucleartrain__TreactorcontrolrodB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reactorcontrolrod" defined at nucleartrain.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorcontrolrod
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactorcontrolrod =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reactorcontrolrod, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorcontrolrod__ref =
  { mutable reactorcontrolrod__content : reactorcontrolrod }
 
 function reactorcontrolrod__ref_reactorcontrolrod__content__projection 
   (a : reactorcontrolrod__ref) : reactorcontrolrod =
  a.reactorcontrolrod__content
 
 meta "model_projection" function reactorcontrolrod__ref_reactorcontrolrod__content__projection
 
 meta "inline:no" function reactorcontrolrod__ref_reactorcontrolrod__content__projection
 
 val reactorcontrolrod__havoc 
   (x : reactorcontrolrod__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorcontrolrod" defined at nucleartrain.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorcontrolrod__rep
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__reactorcontrolrod.reactorcontrolrod) : int =
  (Nucleartrain__reactorcontrolrod.reactorcontrolrod'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__reactorcontrolrod.reactorcontrolrod, 
 predicate in_range = Nucleartrain__reactorcontrolrod.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TreactorwatersupplyB" defined at nucleartrain.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TreactorwatersupplyB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type treactorwatersupplyB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = treactorwatersupplyB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type treactorwatersupplyB__ref =
  { mutable treactorwatersupplyB__content : treactorwatersupplyB }
 
 function treactorwatersupplyB__ref_treactorwatersupplyB__content__projection 
   (a : treactorwatersupplyB__ref) : treactorwatersupplyB =
  a.treactorwatersupplyB__content
 
 meta "model_projection" function treactorwatersupplyB__ref_treactorwatersupplyB__content__projection
 
 meta "inline:no" function treactorwatersupplyB__ref_treactorwatersupplyB__content__projection
 
 val treactorwatersupplyB__havoc 
   (x : treactorwatersupplyB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TreactorwatersupplyB" defined at nucleartrain.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TreactorwatersupplyB__rep
 use        Nucleartrain__TreactorwatersupplyB as Nucleartrain__TreactorwatersupplyB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__TreactorwatersupplyB.treactorwatersupplyB) : int =
  (Nucleartrain__TreactorwatersupplyB.treactorwatersupplyB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__TreactorwatersupplyB.treactorwatersupplyB, 
 predicate in_range = Nucleartrain__TreactorwatersupplyB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reactorwatersupply" defined at nucleartrain.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorwatersupply
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactorwatersupply =
  < range 0 20 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reactorwatersupply, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorwatersupply__ref =
  { mutable reactorwatersupply__content : reactorwatersupply }
 
 function reactorwatersupply__ref_reactorwatersupply__content__projection 
   (a : reactorwatersupply__ref) : reactorwatersupply =
  a.reactorwatersupply__content
 
 meta "model_projection" function reactorwatersupply__ref_reactorwatersupply__content__projection
 
 meta "inline:no" function reactorwatersupply__ref_reactorwatersupply__content__projection
 
 val reactorwatersupply__havoc 
   (x : reactorwatersupply__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorwatersupply" defined at nucleartrain.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorwatersupply__rep
 use        Nucleartrain__reactorwatersupply as Nucleartrain__reactorwatersupply
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__reactorwatersupply.reactorwatersupply) : int =
  (Nucleartrain__reactorwatersupply.reactorwatersupply'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__reactorwatersupply.reactorwatersupply, 
 predicate in_range = Nucleartrain__reactorwatersupply.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TreactorelectricitygeneratedB" defined at nucleartrain.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TreactorelectricitygeneratedB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type treactorelectricitygeneratedB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = treactorelectricitygeneratedB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type treactorelectricitygeneratedB__ref =
  { mutable treactorelectricitygeneratedB__content : treactorelectricitygeneratedB }
 
 function treactorelectricitygeneratedB__ref_treactorelectricitygeneratedB__content__projection 
   (a : treactorelectricitygeneratedB__ref) : treactorelectricitygeneratedB =
  a.treactorelectricitygeneratedB__content
 
 meta "model_projection" function treactorelectricitygeneratedB__ref_treactorelectricitygeneratedB__content__projection
 
 meta "inline:no" function treactorelectricitygeneratedB__ref_treactorelectricitygeneratedB__content__projection
 
 val treactorelectricitygeneratedB__havoc 
   (x : treactorelectricitygeneratedB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TreactorelectricitygeneratedB" defined at nucleartrain.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TreactorelectricitygeneratedB__rep
 use        Nucleartrain__TreactorelectricitygeneratedB as Nucleartrain__TreactorelectricitygeneratedB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__TreactorelectricitygeneratedB.treactorelectricitygeneratedB) : int =
  (Nucleartrain__TreactorelectricitygeneratedB.treactorelectricitygeneratedB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__TreactorelectricitygeneratedB.treactorelectricitygeneratedB, 
 predicate in_range = Nucleartrain__TreactorelectricitygeneratedB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reactorelectricitygenerated" defined at nucleartrain.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorelectricitygenerated
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactorelectricitygenerated =
  < range 0 99 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (99 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reactorelectricitygenerated, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorelectricitygenerated__ref =
  { mutable reactorelectricitygenerated__content : reactorelectricitygenerated }
 
 function reactorelectricitygenerated__ref_reactorelectricitygenerated__content__projection 
   (a : reactorelectricitygenerated__ref) : reactorelectricitygenerated =
  a.reactorelectricitygenerated__content
 
 meta "model_projection" function reactorelectricitygenerated__ref_reactorelectricitygenerated__content__projection
 
 meta "inline:no" function reactorelectricitygenerated__ref_reactorelectricitygenerated__content__projection
 
 val reactorelectricitygenerated__havoc 
   (x : reactorelectricitygenerated__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorelectricitygenerated" defined at nucleartrain.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorelectricitygenerated__rep
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated) : int =
  (Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated, 
 predicate in_range = Nucleartrain__reactorelectricitygenerated.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TreactortemperatureB" defined at nucleartrain.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TreactortemperatureB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type treactortemperatureB =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = treactortemperatureB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type treactortemperatureB__ref =
  { mutable treactortemperatureB__content : treactortemperatureB }
 
 function treactortemperatureB__ref_treactortemperatureB__content__projection 
   (a : treactortemperatureB__ref) : treactortemperatureB =
  a.treactortemperatureB__content
 
 meta "model_projection" function treactortemperatureB__ref_treactortemperatureB__content__projection
 
 meta "inline:no" function treactortemperatureB__ref_treactortemperatureB__content__projection
 
 val treactortemperatureB__havoc 
   (x : treactortemperatureB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TreactortemperatureB" defined at nucleartrain.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TreactortemperatureB__rep
 use        Nucleartrain__TreactortemperatureB as Nucleartrain__TreactortemperatureB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__TreactortemperatureB.treactortemperatureB) : int =
  (Nucleartrain__TreactortemperatureB.treactortemperatureB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__TreactortemperatureB.treactortemperatureB, 
 predicate in_range = Nucleartrain__TreactortemperatureB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reactortemperature" defined at nucleartrain.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactortemperature
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactortemperature =
  < range 0 299 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (299 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reactortemperature, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactortemperature__ref =
  { mutable reactortemperature__content : reactortemperature }
 
 function reactortemperature__ref_reactortemperature__content__projection 
   (a : reactortemperature__ref) : reactortemperature =
  a.reactortemperature__content
 
 meta "model_projection" function reactortemperature__ref_reactortemperature__content__projection
 
 meta "inline:no" function reactortemperature__ref_reactortemperature__content__projection
 
 val reactortemperature__havoc 
   (x : reactortemperature__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactortemperature" defined at nucleartrain.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactortemperature__rep
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__reactortemperature.reactortemperature) : int =
  (Nucleartrain__reactortemperature.reactortemperature'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__reactortemperature.reactortemperature, 
 predicate in_range = Nucleartrain__reactortemperature.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reactoroverheated" defined at nucleartrain.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactoroverheated
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactoroverheated 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reactoroverheated, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactoroverheated__ref =
  { mutable reactoroverheated__content : reactoroverheated }
 
 function reactoroverheated__ref_reactoroverheated__content__projection 
   (a : reactoroverheated__ref) : reactoroverheated =
  a.reactoroverheated__content
 
 meta "model_projection" function reactoroverheated__ref_reactoroverheated__content__projection
 
 meta "inline:no" function reactoroverheated__ref_reactoroverheated__content__projection
 
 val reactoroverheated__havoc 
   (x : reactoroverheated__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactoroverheated" defined at nucleartrain.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactoroverheated__rep
 use        Nucleartrain__reactoroverheated as Nucleartrain__reactoroverheated
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__reactoroverheated.reactoroverheated, 
 predicate in_range = Nucleartrain__reactoroverheated.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reactorstate" defined at nucleartrain.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorstate
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactorstate 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reactorstate, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorstate__ref =
  { mutable reactorstate__content : reactorstate }
 
 function reactorstate__ref_reactorstate__content__projection 
   (a : reactorstate__ref) : reactorstate =
  a.reactorstate__content
 
 meta "model_projection" function reactorstate__ref_reactorstate__content__projection
 
 meta "inline:no" function reactorstate__ref_reactorstate__content__projection
 
 val reactorstate__havoc 
   (x : reactorstate__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorstate" defined at nucleartrain.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorstate__rep
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__reactorstate.reactorstate, 
 predicate in_range = Nucleartrain__reactorstate.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TpassengerscarriagesB" defined at nucleartrain.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TpassengerscarriagesB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpassengerscarriagesB =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpassengerscarriagesB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpassengerscarriagesB__ref =
  { mutable tpassengerscarriagesB__content : tpassengerscarriagesB }
 
 function tpassengerscarriagesB__ref_tpassengerscarriagesB__content__projection 
   (a : tpassengerscarriagesB__ref) : tpassengerscarriagesB =
  a.tpassengerscarriagesB__content
 
 meta "model_projection" function tpassengerscarriagesB__ref_tpassengerscarriagesB__content__projection
 
 meta "inline:no" function tpassengerscarriagesB__ref_tpassengerscarriagesB__content__projection
 
 val tpassengerscarriagesB__havoc 
   (x : tpassengerscarriagesB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpassengerscarriagesB" defined at nucleartrain.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__TpassengerscarriagesB__rep
 use        Nucleartrain__TpassengerscarriagesB as Nucleartrain__TpassengerscarriagesB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__TpassengerscarriagesB.tpassengerscarriagesB) : int =
  (Nucleartrain__TpassengerscarriagesB.tpassengerscarriagesB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__TpassengerscarriagesB.tpassengerscarriagesB, 
 predicate in_range = Nucleartrain__TpassengerscarriagesB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "passengerscarriages" defined at nucleartrain.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__passengerscarriages
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type passengerscarriages =
  < range 0 5 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = passengerscarriages, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type passengerscarriages__ref =
  { mutable passengerscarriages__content : passengerscarriages }
 
 function passengerscarriages__ref_passengerscarriages__content__projection 
   (a : passengerscarriages__ref) : passengerscarriages =
  a.passengerscarriages__content
 
 meta "model_projection" function passengerscarriages__ref_passengerscarriages__content__projection
 
 meta "inline:no" function passengerscarriages__ref_passengerscarriages__content__projection
 
 val passengerscarriages__havoc 
   (x : passengerscarriages__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "passengerscarriages" defined at nucleartrain.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__passengerscarriages__rep
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Nucleartrain__passengerscarriages.passengerscarriages) : int =
  (Nucleartrain__passengerscarriages.passengerscarriages'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Nucleartrain__passengerscarriages.passengerscarriages, 
 predicate in_range = Nucleartrain__passengerscarriages.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "reactorspecs" defined at nucleartrain.ads:18, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Nucleartrain__reactorspecs__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorcontrolrod__rep as Nucleartrain__reactorcontrolrod__rep
 use        Nucleartrain__reactorwatersupply as Nucleartrain__reactorwatersupply
 use        Nucleartrain__reactorwatersupply__rep as Nucleartrain__reactorwatersupply__rep
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Nucleartrain__reactoroverheated as Nucleartrain__reactoroverheated
 use        Nucleartrain__reactoroverheated__rep as Nucleartrain__reactoroverheated__rep
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep

 type __split_fields =
  { rec__nucleartrain__reactorspecs__rods [@name:rods] [@model_trace:.3258] : Nucleartrain__reactorcontrolrod.reactorcontrolrod; rec__nucleartrain__reactorspecs__water [@model_trace:.3268] [@name:water] : Nucleartrain__reactorwatersupply.reactorwatersupply; rec__nucleartrain__reactorspecs__temperature [@name:temperature] [@model_trace:.3278] : Nucleartrain__reactortemperature.reactortemperature; rec__nucleartrain__reactorspecs__heat [@model_trace:.3288] [@name:heat] : Nucleartrain__reactoroverheated.reactoroverheated; rec__nucleartrain__reactorspecs__state [@model_trace:.3298] [@name:state] : Nucleartrain__reactorstate.reactorstate }
 
 function __split_fields_rec__nucleartrain__reactorspecs__rods__projection [@name:rods] [@model_trace:.3258] 
   (a : __split_fields) : Nucleartrain__reactorcontrolrod.reactorcontrolrod =
  a.rec__nucleartrain__reactorspecs__rods
 
 meta "model_projection" function __split_fields_rec__nucleartrain__reactorspecs__rods__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__reactorspecs__rods__projection
 
 function __split_fields_rec__nucleartrain__reactorspecs__water__projection [@model_trace:.3268] [@name:water] 
   (a : __split_fields) : Nucleartrain__reactorwatersupply.reactorwatersupply =
  a.rec__nucleartrain__reactorspecs__water
 
 meta "model_projection" function __split_fields_rec__nucleartrain__reactorspecs__water__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__reactorspecs__water__projection
 
 function __split_fields_rec__nucleartrain__reactorspecs__temperature__projection [@name:temperature] [@model_trace:.3278] 
   (a : __split_fields) : Nucleartrain__reactortemperature.reactortemperature =
  a.rec__nucleartrain__reactorspecs__temperature
 
 meta "model_projection" function __split_fields_rec__nucleartrain__reactorspecs__temperature__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__reactorspecs__temperature__projection
 
 function __split_fields_rec__nucleartrain__reactorspecs__heat__projection [@model_trace:.3288] [@name:heat] 
   (a : __split_fields) : Nucleartrain__reactoroverheated.reactoroverheated =
  a.rec__nucleartrain__reactorspecs__heat
 
 meta "model_projection" function __split_fields_rec__nucleartrain__reactorspecs__heat__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__reactorspecs__heat__projection
 
 function __split_fields_rec__nucleartrain__reactorspecs__state__projection [@model_trace:.3298] [@name:state] 
   (a : __split_fields) : Nucleartrain__reactorstate.reactorstate =
  a.rec__nucleartrain__reactorspecs__state
 
 meta "model_projection" function __split_fields_rec__nucleartrain__reactorspecs__state__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__reactorspecs__state__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate nucleartrain__reactorspecs__rods__pred 
   (a : __rep) =
  true
 val nucleartrain__reactorspecs__rods__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__reactorspecs__rods__pred (a : __rep) }
 
 val rec__nucleartrain__reactorspecs__rods_ 
   (a : __rep) : Nucleartrain__reactorcontrolrod.reactorcontrolrod
  requires {  (nucleartrain__reactorspecs__rods__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__reactorspecs__rods) }
 
 predicate nucleartrain__reactorspecs__water__pred 
   (a : __rep) =
  true
 val nucleartrain__reactorspecs__water__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__reactorspecs__water__pred (a : __rep) }
 
 val rec__nucleartrain__reactorspecs__water_ 
   (a : __rep) : Nucleartrain__reactorwatersupply.reactorwatersupply
  requires {  (nucleartrain__reactorspecs__water__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__reactorspecs__water) }
 
 predicate nucleartrain__reactorspecs__temperature__pred 
   (a : __rep) =
  true
 val nucleartrain__reactorspecs__temperature__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__reactorspecs__temperature__pred (a : __rep) }
 
 val rec__nucleartrain__reactorspecs__temperature_ 
   (a : __rep) : Nucleartrain__reactortemperature.reactortemperature
  requires {  (nucleartrain__reactorspecs__temperature__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__reactorspecs__temperature) }
 
 predicate nucleartrain__reactorspecs__heat__pred 
   (a : __rep) =
  true
 val nucleartrain__reactorspecs__heat__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__reactorspecs__heat__pred (a : __rep) }
 
 val rec__nucleartrain__reactorspecs__heat_ 
   (a : __rep) : Nucleartrain__reactoroverheated.reactoroverheated
  requires {  (nucleartrain__reactorspecs__heat__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__reactorspecs__heat) }
 
 predicate nucleartrain__reactorspecs__state__pred 
   (a : __rep) =
  true
 val nucleartrain__reactorspecs__state__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__reactorspecs__state__pred (a : __rep) }
 
 val rec__nucleartrain__reactorspecs__state_ 
   (a : __rep) : Nucleartrain__reactorstate.reactorstate
  requires {  (nucleartrain__reactorspecs__state__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__reactorspecs__state) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Nucleartrain__reactorcontrolrod__rep.to_rep a.__split_fields.rec__nucleartrain__reactorspecs__rods) = (Nucleartrain__reactorcontrolrod__rep.to_rep b.__split_fields.rec__nucleartrain__reactorspecs__rods)) /\ ((Nucleartrain__reactorwatersupply__rep.to_rep a.__split_fields.rec__nucleartrain__reactorspecs__water) = (Nucleartrain__reactorwatersupply__rep.to_rep b.__split_fields.rec__nucleartrain__reactorspecs__water)) )/\( ( ((Nucleartrain__reactortemperature__rep.to_rep a.__split_fields.rec__nucleartrain__reactorspecs__temperature) = (Nucleartrain__reactortemperature__rep.to_rep b.__split_fields.rec__nucleartrain__reactorspecs__temperature))/\((Nucleartrain__reactoroverheated__rep.to_rep a.__split_fields.rec__nucleartrain__reactorspecs__heat) = (Nucleartrain__reactoroverheated__rep.to_rep b.__split_fields.rec__nucleartrain__reactorspecs__heat)) )/\((Nucleartrain__reactorstate__rep.to_rep a.__split_fields.rec__nucleartrain__reactorspecs__state) = (Nucleartrain__reactorstate__rep.to_rep b.__split_fields.rec__nucleartrain__reactorspecs__state)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "reactorspecs" defined at nucleartrain.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__reactorspecs
 use export Nucleartrain__reactorspecs__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactorspecs =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant nucleartrain__reactorspecs__rods__first__bit 
   : int

 
 val constant nucleartrain__reactorspecs__rods__last__bit 
   : int

 
 val constant nucleartrain__reactorspecs__rods__position 
   : int

 
 axiom nucleartrain__reactorspecs__rods__first__bit_axiom :
  ((nucleartrain__reactorspecs__rods__first__bit ) >= (0 : int))
 
 axiom nucleartrain__reactorspecs__rods__last__bit_axiom :
  ((nucleartrain__reactorspecs__rods__last__bit ) > (nucleartrain__reactorspecs__rods__first__bit ))
 
 axiom nucleartrain__reactorspecs__rods__position_axiom :
  ((nucleartrain__reactorspecs__rods__position ) >= (0 : int))
 
 val constant nucleartrain__reactorspecs__water__first__bit 
   : int

 
 val constant nucleartrain__reactorspecs__water__last__bit 
   : int

 
 val constant nucleartrain__reactorspecs__water__position 
   : int

 
 axiom nucleartrain__reactorspecs__water__first__bit_axiom :
  ((nucleartrain__reactorspecs__water__first__bit ) >= (0 : int))
 
 axiom nucleartrain__reactorspecs__water__last__bit_axiom :
  ((nucleartrain__reactorspecs__water__last__bit ) > (nucleartrain__reactorspecs__water__first__bit ))
 
 axiom nucleartrain__reactorspecs__water__position_axiom :
  ((nucleartrain__reactorspecs__water__position ) >= (0 : int))
 
 val constant nucleartrain__reactorspecs__temperature__first__bit 
   : int

 
 val constant nucleartrain__reactorspecs__temperature__last__bit 
   : int

 
 val constant nucleartrain__reactorspecs__temperature__position 
   : int

 
 axiom nucleartrain__reactorspecs__temperature__first__bit_axiom :
  ((nucleartrain__reactorspecs__temperature__first__bit ) >= (0 : int))
 
 axiom nucleartrain__reactorspecs__temperature__last__bit_axiom :
  ((nucleartrain__reactorspecs__temperature__last__bit ) > (nucleartrain__reactorspecs__temperature__first__bit ))
 
 axiom nucleartrain__reactorspecs__temperature__position_axiom :
  ((nucleartrain__reactorspecs__temperature__position ) >= (0 : int))
 
 val constant nucleartrain__reactorspecs__heat__first__bit 
   : int

 
 val constant nucleartrain__reactorspecs__heat__last__bit 
   : int

 
 val constant nucleartrain__reactorspecs__heat__position 
   : int

 
 axiom nucleartrain__reactorspecs__heat__first__bit_axiom :
  ((nucleartrain__reactorspecs__heat__first__bit ) >= (0 : int))
 
 axiom nucleartrain__reactorspecs__heat__last__bit_axiom :
  ((nucleartrain__reactorspecs__heat__last__bit ) > (nucleartrain__reactorspecs__heat__first__bit ))
 
 axiom nucleartrain__reactorspecs__heat__position_axiom :
  ((nucleartrain__reactorspecs__heat__position ) >= (0 : int))
 
 val constant nucleartrain__reactorspecs__state__first__bit 
   : int

 
 val constant nucleartrain__reactorspecs__state__last__bit 
   : int

 
 val constant nucleartrain__reactorspecs__state__position 
   : int

 
 axiom nucleartrain__reactorspecs__state__first__bit_axiom :
  ((nucleartrain__reactorspecs__state__first__bit ) >= (0 : int))
 
 axiom nucleartrain__reactorspecs__state__last__bit_axiom :
  ((nucleartrain__reactorspecs__state__last__bit ) > (nucleartrain__reactorspecs__state__first__bit ))
 
 axiom nucleartrain__reactorspecs__state__position_axiom :
  ((nucleartrain__reactorspecs__state__position ) >= (0 : int))
 
 val function user_eq 
   (a : reactorspecs) (b : reactorspecs) : bool
 
 val constant dummy 
   : reactorspecs

 
 type reactorspecs__ref =
  { mutable reactorspecs__content : reactorspecs }
 
 function reactorspecs__ref_reactorspecs__content__projection 
   (a : reactorspecs__ref) : reactorspecs =
  a.reactorspecs__content
 
 meta "model_projection" function reactorspecs__ref_reactorspecs__content__projection
 
 meta "inline:no" function reactorspecs__ref_reactorspecs__content__projection
 
 val reactorspecs__havoc 
   (x : reactorspecs__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "trainspecs" defined at nucleartrain.ads:26, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Nucleartrain__trainspecs__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated
 use        Nucleartrain__reactorelectricitygenerated__rep as Nucleartrain__reactorelectricitygenerated__rep
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages
 use        Nucleartrain__passengerscarriages__rep as Nucleartrain__passengerscarriages__rep

 type __split_fields =
  { rec__nucleartrain__trainspecs__enginereactor [@model_trace:.3320] [@name:engineReactor] : Nucleartrain__reactorspecs.reactorspecs; rec__nucleartrain__trainspecs__electricity [@model_trace:.3330] [@name:electricity] : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated; rec__nucleartrain__trainspecs__carriages [@model_trace:.3340] [@name:carriages] : Nucleartrain__passengerscarriages.passengerscarriages; rec__nucleartrain__trainspecs__travelspeed [@name:travelSpeed] [@model_trace:.3350] : Standard__integer.integer; rec__nucleartrain__trainspecs__maxtravelspeed [@name:maxTravelSpeed] [@model_trace:.3360] : Standard__integer.integer }
 
 function __split_fields_rec__nucleartrain__trainspecs__enginereactor__projection [@model_trace:.3320] [@name:engineReactor] 
   (a : __split_fields) : Nucleartrain__reactorspecs.reactorspecs =
  a.rec__nucleartrain__trainspecs__enginereactor
 
 meta "model_projection" function __split_fields_rec__nucleartrain__trainspecs__enginereactor__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__trainspecs__enginereactor__projection
 
 function __split_fields_rec__nucleartrain__trainspecs__electricity__projection [@model_trace:.3330] [@name:electricity] 
   (a : __split_fields) : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated =
  a.rec__nucleartrain__trainspecs__electricity
 
 meta "model_projection" function __split_fields_rec__nucleartrain__trainspecs__electricity__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__trainspecs__electricity__projection
 
 function __split_fields_rec__nucleartrain__trainspecs__carriages__projection [@model_trace:.3340] [@name:carriages] 
   (a : __split_fields) : Nucleartrain__passengerscarriages.passengerscarriages =
  a.rec__nucleartrain__trainspecs__carriages
 
 meta "model_projection" function __split_fields_rec__nucleartrain__trainspecs__carriages__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__trainspecs__carriages__projection
 
 function __split_fields_rec__nucleartrain__trainspecs__travelspeed__projection [@name:travelSpeed] [@model_trace:.3350] 
   (a : __split_fields) : Standard__integer.integer =
  a.rec__nucleartrain__trainspecs__travelspeed
 
 meta "model_projection" function __split_fields_rec__nucleartrain__trainspecs__travelspeed__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__trainspecs__travelspeed__projection
 
 function __split_fields_rec__nucleartrain__trainspecs__maxtravelspeed__projection [@name:maxTravelSpeed] [@model_trace:.3360] 
   (a : __split_fields) : Standard__integer.integer =
  a.rec__nucleartrain__trainspecs__maxtravelspeed
 
 meta "model_projection" function __split_fields_rec__nucleartrain__trainspecs__maxtravelspeed__projection
 
 meta "inline:no" function __split_fields_rec__nucleartrain__trainspecs__maxtravelspeed__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate nucleartrain__trainspecs__enginereactor__pred 
   (a : __rep) =
  true
 val nucleartrain__trainspecs__enginereactor__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__trainspecs__enginereactor__pred (a : __rep) }
 
 val rec__nucleartrain__trainspecs__enginereactor_ 
   (a : __rep) : Nucleartrain__reactorspecs.reactorspecs
  requires {  (nucleartrain__trainspecs__enginereactor__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__trainspecs__enginereactor) }
 
 predicate nucleartrain__trainspecs__electricity__pred 
   (a : __rep) =
  true
 val nucleartrain__trainspecs__electricity__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__trainspecs__electricity__pred (a : __rep) }
 
 val rec__nucleartrain__trainspecs__electricity_ 
   (a : __rep) : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated
  requires {  (nucleartrain__trainspecs__electricity__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__trainspecs__electricity) }
 
 predicate nucleartrain__trainspecs__carriages__pred 
   (a : __rep) =
  true
 val nucleartrain__trainspecs__carriages__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__trainspecs__carriages__pred (a : __rep) }
 
 val rec__nucleartrain__trainspecs__carriages_ 
   (a : __rep) : Nucleartrain__passengerscarriages.passengerscarriages
  requires {  (nucleartrain__trainspecs__carriages__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__trainspecs__carriages) }
 
 predicate nucleartrain__trainspecs__travelspeed__pred 
   (a : __rep) =
  true
 val nucleartrain__trainspecs__travelspeed__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__trainspecs__travelspeed__pred (a : __rep) }
 
 val rec__nucleartrain__trainspecs__travelspeed_ 
   (a : __rep) : Standard__integer.integer
  requires {  (nucleartrain__trainspecs__travelspeed__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__trainspecs__travelspeed) }
 
 predicate nucleartrain__trainspecs__maxtravelspeed__pred 
   (a : __rep) =
  true
 val nucleartrain__trainspecs__maxtravelspeed__pred 
   (a : __rep) : bool
  ensures { result <-> nucleartrain__trainspecs__maxtravelspeed__pred (a : __rep) }
 
 val rec__nucleartrain__trainspecs__maxtravelspeed_ 
   (a : __rep) : Standard__integer.integer
  requires {  (nucleartrain__trainspecs__maxtravelspeed__pred a) }
  ensures {  (result = a.__split_fields.rec__nucleartrain__trainspecs__maxtravelspeed) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( (Nucleartrain__reactorspecs.bool_eq a.__split_fields.rec__nucleartrain__trainspecs__enginereactor b.__split_fields.rec__nucleartrain__trainspecs__enginereactor) /\ ((Nucleartrain__reactorelectricitygenerated__rep.to_rep a.__split_fields.rec__nucleartrain__trainspecs__electricity) = (Nucleartrain__reactorelectricitygenerated__rep.to_rep b.__split_fields.rec__nucleartrain__trainspecs__electricity)) )/\( ( ((Nucleartrain__passengerscarriages__rep.to_rep a.__split_fields.rec__nucleartrain__trainspecs__carriages) = (Nucleartrain__passengerscarriages__rep.to_rep b.__split_fields.rec__nucleartrain__trainspecs__carriages))/\((Standard__integer__rep.to_rep a.__split_fields.rec__nucleartrain__trainspecs__travelspeed) = (Standard__integer__rep.to_rep b.__split_fields.rec__nucleartrain__trainspecs__travelspeed)) )/\((Standard__integer__rep.to_rep a.__split_fields.rec__nucleartrain__trainspecs__maxtravelspeed) = (Standard__integer__rep.to_rep b.__split_fields.rec__nucleartrain__trainspecs__maxtravelspeed)) ) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "trainspecs" defined at nucleartrain.ads:26, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__trainspecs
 use export Nucleartrain__trainspecs__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type trainspecs =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant nucleartrain__trainspecs__enginereactor__first__bit 
   : int

 
 val constant nucleartrain__trainspecs__enginereactor__last__bit 
   : int

 
 val constant nucleartrain__trainspecs__enginereactor__position 
   : int

 
 axiom nucleartrain__trainspecs__enginereactor__first__bit_axiom :
  ((nucleartrain__trainspecs__enginereactor__first__bit ) >= (0 : int))
 
 axiom nucleartrain__trainspecs__enginereactor__last__bit_axiom :
  ((nucleartrain__trainspecs__enginereactor__last__bit ) > (nucleartrain__trainspecs__enginereactor__first__bit ))
 
 axiom nucleartrain__trainspecs__enginereactor__position_axiom :
  ((nucleartrain__trainspecs__enginereactor__position ) >= (0 : int))
 
 val constant nucleartrain__trainspecs__electricity__first__bit 
   : int

 
 val constant nucleartrain__trainspecs__electricity__last__bit 
   : int

 
 val constant nucleartrain__trainspecs__electricity__position 
   : int

 
 axiom nucleartrain__trainspecs__electricity__first__bit_axiom :
  ((nucleartrain__trainspecs__electricity__first__bit ) >= (0 : int))
 
 axiom nucleartrain__trainspecs__electricity__last__bit_axiom :
  ((nucleartrain__trainspecs__electricity__last__bit ) > (nucleartrain__trainspecs__electricity__first__bit ))
 
 axiom nucleartrain__trainspecs__electricity__position_axiom :
  ((nucleartrain__trainspecs__electricity__position ) >= (0 : int))
 
 val constant nucleartrain__trainspecs__carriages__first__bit 
   : int

 
 val constant nucleartrain__trainspecs__carriages__last__bit 
   : int

 
 val constant nucleartrain__trainspecs__carriages__position 
   : int

 
 axiom nucleartrain__trainspecs__carriages__first__bit_axiom :
  ((nucleartrain__trainspecs__carriages__first__bit ) >= (0 : int))
 
 axiom nucleartrain__trainspecs__carriages__last__bit_axiom :
  ((nucleartrain__trainspecs__carriages__last__bit ) > (nucleartrain__trainspecs__carriages__first__bit ))
 
 axiom nucleartrain__trainspecs__carriages__position_axiom :
  ((nucleartrain__trainspecs__carriages__position ) >= (0 : int))
 
 val constant nucleartrain__trainspecs__travelspeed__first__bit 
   : int

 
 val constant nucleartrain__trainspecs__travelspeed__last__bit 
   : int

 
 val constant nucleartrain__trainspecs__travelspeed__position 
   : int

 
 axiom nucleartrain__trainspecs__travelspeed__first__bit_axiom :
  ((nucleartrain__trainspecs__travelspeed__first__bit ) >= (0 : int))
 
 axiom nucleartrain__trainspecs__travelspeed__last__bit_axiom :
  ((nucleartrain__trainspecs__travelspeed__last__bit ) > (nucleartrain__trainspecs__travelspeed__first__bit ))
 
 axiom nucleartrain__trainspecs__travelspeed__position_axiom :
  ((nucleartrain__trainspecs__travelspeed__position ) >= (0 : int))
 
 val constant nucleartrain__trainspecs__maxtravelspeed__first__bit 
   : int

 
 val constant nucleartrain__trainspecs__maxtravelspeed__last__bit 
   : int

 
 val constant nucleartrain__trainspecs__maxtravelspeed__position 
   : int

 
 axiom nucleartrain__trainspecs__maxtravelspeed__first__bit_axiom :
  ((nucleartrain__trainspecs__maxtravelspeed__first__bit ) >= (0 : int))
 
 axiom nucleartrain__trainspecs__maxtravelspeed__last__bit_axiom :
  ((nucleartrain__trainspecs__maxtravelspeed__last__bit ) > (nucleartrain__trainspecs__maxtravelspeed__first__bit ))
 
 axiom nucleartrain__trainspecs__maxtravelspeed__position_axiom :
  ((nucleartrain__trainspecs__maxtravelspeed__position ) >= (0 : int))
 
 val function user_eq 
   (a : trainspecs) (b : trainspecs) : bool
 
 val constant dummy 
   : trainspecs

 
 type trainspecs__ref =
  { mutable trainspecs__content : trainspecs }
 
 function trainspecs__ref_trainspecs__content__projection 
   (a : trainspecs__ref) : trainspecs =
  a.trainspecs__content
 
 meta "model_projection" function trainspecs__ref_trainspecs__content__projection
 
 meta "inline:no" function trainspecs__ref_trainspecs__content__projection
 
 val trainspecs__havoc 
   (x : trainspecs__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1b" defined at nucleartrain.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__initiatereactor__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (14 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@model_trace:7567] [@name:Item] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T2b" defined at nucleartrain.adb:16, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__maintenancereactor__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (14 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at nucleartrain.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__insertcontrolrod__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (44 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T4b" defined at nucleartrain.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__insertcontrolrod__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (48 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T5b" defined at nucleartrain.adb:34, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__removecontrolrod__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (33 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T6b" defined at nucleartrain.adb:36, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__removecontrolrod__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (48 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7b" defined at nucleartrain.adb:44, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__addonecarriage__T7b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (41 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T8b" defined at nucleartrain.adb:46, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__addonecarriage__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (45 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T9b" defined at nucleartrain.adb:54, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__removeonecarriage__T9b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (29 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T10b" defined at nucleartrain.adb:91, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__stoptrain__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (23 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T11b" defined at nucleartrain.adb:98, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__settrainmaximumspeed__T11b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (0 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T12b" defined at nucleartrain.adb:99, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__settrainmaximumspeed__T12b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (68 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T13b" defined at nucleartrain.adb:111, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__trainacceleration__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T14b" defined at nucleartrain.adb:119, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__warnreactoroverheat__T14b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (93 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T15b" defined at nucleartrain.adb:128, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__watercooldownreactor__T15b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T16b" defined at nucleartrain.adb:129, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__watercooldownreactor__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (56 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T17b" defined at nucleartrain.adb:132, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__watercooldownreactor__T17b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (90 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T18b" defined at nucleartrain.adb:140, created in Gnat2Why.Types.Translate_Type *)
module Nucleartrain__refillwatersupply__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "reactor" defined at nucleartrain.ads:34, created in Gnat2Why.Decls.Translate_Variable *)
module Nucleartrain__reactor
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs

 val reactor__split_fields [#"nucleartrain.ads" 34 0 0][@model_trace:3372] [@model_projected] [@name:reactor]  : Nucleartrain__reactorspecs.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "reactor" defined at nucleartrain.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Nucleartrain__reactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "train" defined at nucleartrain.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Nucleartrain__train
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs

 val train__split_fields [#"nucleartrain.ads" 40 0 0][@model_projected] [@model_trace:3403] [@name:train]  : Nucleartrain__trainspecs.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "train" defined at nucleartrain.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Nucleartrain__train___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) (ada__text_io__file_system : Main.__private)

end

(* Module for possibly declaring a logic function for "invariant" defined at nucleartrain.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__invariant
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs

 val function invariant__ 
   (nucleartrain__train__fields : Nucleartrain__trainspecs.__split_fields) : bool
 
 val predicate invariant____function_guard 
   (temp___result_156 : bool) (nucleartrain__train__fields : Nucleartrain__trainspecs.__split_fields)

end

(* Module for possibly declaring a logic function for "initiatereactor" defined at nucleartrain.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__initiatereactor
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "maintenancereactor" defined at nucleartrain.ads:55, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__maintenancereactor
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "insertcontrolrod" defined at nucleartrain.ads:61, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__insertcontrolrod
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "removecontrolrod" defined at nucleartrain.ads:67, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__removecontrolrod
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "addonecarriage" defined at nucleartrain.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__addonecarriage
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "removeonecarriage" defined at nucleartrain.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__removeonecarriage
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "reactoronline" defined at nucleartrain.ads:83, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__reactoronline
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "starttrain" defined at nucleartrain.ads:94, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__starttrain
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "stoptrain" defined at nucleartrain.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__stoptrain
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "settrainmaximumspeed" defined at nucleartrain.ads:109, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__settrainmaximumspeed
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "trainacceleration" defined at nucleartrain.ads:114, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__trainacceleration
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "warnreactoroverheat" defined at nucleartrain.ads:122, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__warnreactoroverheat
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "watercooldownreactor" defined at nucleartrain.ads:130, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__watercooldownreactor
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "refillwatersupply" defined at nucleartrain.ads:139, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Nucleartrain__refillwatersupply
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_161 : int) (temp___is_init_157 : bool) (temp___skip_constant_158 : bool) (temp___do_toplevel_159 : bool) (temp___do_typ_inv_160 : bool) =
  (if (( temp___is_init_157 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_161)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_161 : int) (temp___is_init_157 : bool) (temp___skip_constant_158 : bool) (temp___do_toplevel_159 : bool) (temp___do_typ_inv_160 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_161 : int) (temp___is_init_157 : bool) (temp___skip_constant_158 : bool) (temp___do_toplevel_159 : bool) (temp___do_typ_inv_160 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_162 : int) (temp___skip_top_level_163 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_162 : int) (temp___skip_top_level_163 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_162 : int) (temp___skip_top_level_163 : bool) }

end

(* Module giving axioms for type "TreactorcontrolrodB" defined at nucleartrain.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__TreactorcontrolrodB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "reactorcontrolrod" defined at nucleartrain.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__reactorcontrolrod___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod

 predicate dynamic_invariant [@inline] 
   (temp___expr_168 : int) (temp___is_init_164 : bool) (temp___skip_constant_165 : bool) (temp___do_toplevel_166 : bool) (temp___do_typ_inv_167 : bool) =
  (if (( temp___is_init_164 \/ (Nucleartrain__reactorcontrolrod.first <= Nucleartrain__reactorcontrolrod.last) )) then (
   (Nucleartrain__reactorcontrolrod.dynamic_property Nucleartrain__reactorcontrolrod.first Nucleartrain__reactorcontrolrod.last temp___expr_168)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_168 : int) (temp___is_init_164 : bool) (temp___skip_constant_165 : bool) (temp___do_toplevel_166 : bool) (temp___do_typ_inv_167 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_168 : int) (temp___is_init_164 : bool) (temp___skip_constant_165 : bool) (temp___do_toplevel_166 : bool) (temp___do_typ_inv_167 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_169 : int) (temp___skip_top_level_170 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_169 : int) (temp___skip_top_level_170 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_169 : int) (temp___skip_top_level_170 : bool) }

end

(* Module giving axioms for type "TreactorwatersupplyB" defined at nucleartrain.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__TreactorwatersupplyB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "reactorwatersupply" defined at nucleartrain.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__reactorwatersupply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorwatersupply as Nucleartrain__reactorwatersupply

 predicate dynamic_invariant [@inline] 
   (temp___expr_175 : int) (temp___is_init_171 : bool) (temp___skip_constant_172 : bool) (temp___do_toplevel_173 : bool) (temp___do_typ_inv_174 : bool) =
  (if (( temp___is_init_171 \/ (Nucleartrain__reactorwatersupply.first <= Nucleartrain__reactorwatersupply.last) )) then (
   (Nucleartrain__reactorwatersupply.dynamic_property Nucleartrain__reactorwatersupply.first Nucleartrain__reactorwatersupply.last temp___expr_175)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_175 : int) (temp___is_init_171 : bool) (temp___skip_constant_172 : bool) (temp___do_toplevel_173 : bool) (temp___do_typ_inv_174 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_175 : int) (temp___is_init_171 : bool) (temp___skip_constant_172 : bool) (temp___do_toplevel_173 : bool) (temp___do_typ_inv_174 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_176 : int) (temp___skip_top_level_177 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_176 : int) (temp___skip_top_level_177 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_176 : int) (temp___skip_top_level_177 : bool) }

end

(* Module giving axioms for type "TreactorelectricitygeneratedB" defined at nucleartrain.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__TreactorelectricitygeneratedB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "reactorelectricitygenerated" defined at nucleartrain.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__reactorelectricitygenerated___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated

 predicate dynamic_invariant [@inline] 
   (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) =
  (if (( temp___is_init_178 \/ (Nucleartrain__reactorelectricitygenerated.first <= Nucleartrain__reactorelectricitygenerated.last) )) then (
   (Nucleartrain__reactorelectricitygenerated.dynamic_property Nucleartrain__reactorelectricitygenerated.first Nucleartrain__reactorelectricitygenerated.last temp___expr_182)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_183 : int) (temp___skip_top_level_184 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_183 : int) (temp___skip_top_level_184 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_183 : int) (temp___skip_top_level_184 : bool) }

end

(* Module giving axioms for type "TreactortemperatureB" defined at nucleartrain.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__TreactortemperatureB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "reactortemperature" defined at nucleartrain.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__reactortemperature___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature

 predicate dynamic_invariant [@inline] 
   (temp___expr_189 : int) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool) =
  (if (( temp___is_init_185 \/ (Nucleartrain__reactortemperature.first <= Nucleartrain__reactortemperature.last) )) then (
   (Nucleartrain__reactortemperature.dynamic_property Nucleartrain__reactortemperature.first Nucleartrain__reactortemperature.last temp___expr_189)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_189 : int) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_189 : int) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_190 : int) (temp___skip_top_level_191 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_190 : int) (temp___skip_top_level_191 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_190 : int) (temp___skip_top_level_191 : bool) }

end

(* Module giving axioms for type "reactoroverheated" defined at nucleartrain.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__reactoroverheated___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactoroverheated as Nucleartrain__reactoroverheated

 predicate dynamic_invariant [@inline] 
   (temp___expr_196 : int) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool) =
  (if (( temp___is_init_192 \/ (Nucleartrain__reactoroverheated.first <= Nucleartrain__reactoroverheated.last) )) then (
   (Nucleartrain__reactoroverheated.dynamic_property Nucleartrain__reactoroverheated.first Nucleartrain__reactoroverheated.last temp___expr_196)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_196 : int) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_196 : int) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_197 : int) (temp___skip_top_level_198 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_197 : int) (temp___skip_top_level_198 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_197 : int) (temp___skip_top_level_198 : bool) }

end

(* Module giving axioms for type "reactorstate" defined at nucleartrain.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__reactorstate___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate

 predicate dynamic_invariant [@inline] 
   (temp___expr_203 : int) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) =
  (if (( temp___is_init_199 \/ (Nucleartrain__reactorstate.first <= Nucleartrain__reactorstate.last) )) then (
   (Nucleartrain__reactorstate.dynamic_property Nucleartrain__reactorstate.first Nucleartrain__reactorstate.last temp___expr_203)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_203 : int) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_203 : int) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_204 : int) (temp___skip_top_level_205 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_204 : int) (temp___skip_top_level_205 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_204 : int) (temp___skip_top_level_205 : bool) }

end

(* Module giving axioms for type "TpassengerscarriagesB" defined at nucleartrain.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__TpassengerscarriagesB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "passengerscarriages" defined at nucleartrain.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__passengerscarriages___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages

 predicate dynamic_invariant [@inline] 
   (temp___expr_210 : int) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) =
  (if (( temp___is_init_206 \/ (Nucleartrain__passengerscarriages.first <= Nucleartrain__passengerscarriages.last) )) then (
   (Nucleartrain__passengerscarriages.dynamic_property Nucleartrain__passengerscarriages.first Nucleartrain__passengerscarriages.last temp___expr_210)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_210 : int) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_210 : int) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_211 : int) (temp___skip_top_level_212 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_211 : int) (temp___skip_top_level_212 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_211 : int) (temp___skip_top_level_212 : bool) }

end

(* Module giving axioms for type "reactorspecs" defined at nucleartrain.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__reactorspecs___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs

 predicate dynamic_invariant [@inline] 
   (temp___expr_217 : Nucleartrain__reactorspecs.reactorspecs) (temp___is_init_213 : bool) (temp___skip_constant_214 : bool) (temp___do_toplevel_215 : bool) (temp___do_typ_inv_216 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_217 : Nucleartrain__reactorspecs.reactorspecs) (temp___is_init_213 : bool) (temp___skip_constant_214 : bool) (temp___do_toplevel_215 : bool) (temp___do_typ_inv_216 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_217 : Nucleartrain__reactorspecs.reactorspecs) (temp___is_init_213 : bool) (temp___skip_constant_214 : bool) (temp___do_toplevel_215 : bool) (temp___do_typ_inv_216 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_218 : Nucleartrain__reactorspecs.reactorspecs) (temp___skip_top_level_219 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_218 : Nucleartrain__reactorspecs.reactorspecs) (temp___skip_top_level_219 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_218 : Nucleartrain__reactorspecs.reactorspecs) (temp___skip_top_level_219 : bool) }

end

(* Module giving axioms for type "trainspecs" defined at nucleartrain.ads:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__trainspecs___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs

 predicate dynamic_invariant [@inline] 
   (temp___expr_229 : Nucleartrain__trainspecs.trainspecs) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool) (temp___do_typ_inv_228 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_229 : Nucleartrain__trainspecs.trainspecs) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool) (temp___do_typ_inv_228 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_229 : Nucleartrain__trainspecs.trainspecs) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool) (temp___do_typ_inv_228 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_230 : Nucleartrain__trainspecs.trainspecs) (temp___skip_top_level_231 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_230 : Nucleartrain__trainspecs.trainspecs) (temp___skip_top_level_231 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_230 : Nucleartrain__trainspecs.trainspecs) (temp___skip_top_level_231 : bool) }

end

(* Module giving axioms for type "T1b" defined at nucleartrain.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__initiatereactor__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at nucleartrain.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__maintenancereactor__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3b" defined at nucleartrain.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__insertcontrolrod__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at nucleartrain.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__insertcontrolrod__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at nucleartrain.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__removecontrolrod__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at nucleartrain.adb:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__removecontrolrod__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7b" defined at nucleartrain.adb:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__addonecarriage__T7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at nucleartrain.adb:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__addonecarriage__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T9b" defined at nucleartrain.adb:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__removeonecarriage__T9b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at nucleartrain.adb:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__stoptrain__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T11b" defined at nucleartrain.adb:98, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__settrainmaximumspeed__T11b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T12b" defined at nucleartrain.adb:99, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__settrainmaximumspeed__T12b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13b" defined at nucleartrain.adb:111, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__trainacceleration__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T14b" defined at nucleartrain.adb:119, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__warnreactoroverheat__T14b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T15b" defined at nucleartrain.adb:128, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__watercooldownreactor__T15b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T16b" defined at nucleartrain.adb:129, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__watercooldownreactor__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17b" defined at nucleartrain.adb:132, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__watercooldownreactor__T17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18b" defined at nucleartrain.adb:140, created in Gnat2Why.Types.Generate_Type_Completion *)
module Nucleartrain__refillwatersupply__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at nucleartrain.adb:9, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_252
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_252 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_252__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_252 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (5 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (6 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (7 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (9 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (10 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (11 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (12 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (13 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_252 __void_param) (14 : int))) = (58 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:16, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_258
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_258 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_258__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_258 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (5 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (6 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (7 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (9 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (10 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (11 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (12 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (13 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_258 __void_param) (14 : int))) = (58 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:24, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_264
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_264 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_264__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_264 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (3 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (5 : int))) = (100 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (7 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (8 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (10 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (11 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (12 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (13 : int))) = (108 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (14 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (15 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (16 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (17 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (18 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (19 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (20 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (21 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (22 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (23 : int))) = (114 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (24 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (25 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (26 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (27 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (28 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (29 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (30 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (31 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (32 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (33 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (34 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (35 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (36 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (37 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (38 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (39 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (40 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (41 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (42 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (43 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_264 __void_param) (44 : int))) = (58 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:26, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_267
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_267 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_267__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_267 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (1 : int))) = (77 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (3 : int))) = (120 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (4 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (5 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (6 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (7 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (9 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (10 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (11 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (12 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (13 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (14 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (16 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (17 : int))) = (102 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (19 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (20 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (21 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (22 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (23 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (24 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (25 : int))) = (108 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (26 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (27 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (28 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (29 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (30 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (31 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (32 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (33 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (34 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (35 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (36 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (37 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (38 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (39 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (40 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (41 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (42 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (43 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (44 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (45 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (46 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (47 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_267 __void_param) (48 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:34, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_273
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_273 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_273__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_273 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (1 : int))) = (79 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (6 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (7 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (8 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (9 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (10 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (11 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (12 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (13 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (14 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (15 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (16 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (17 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (18 : int))) = (97 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (19 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (20 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (21 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (22 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (23 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (24 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (25 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (26 : int))) = (114 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (27 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (28 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (29 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (30 : int))) = (118 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (31 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (32 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_273 __void_param) (33 : int))) = (58 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:36, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_276
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_276 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_276__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_276 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (1 : int))) = (77 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (2 : int))) = (105 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (3 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (4 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (5 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (6 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (7 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (9 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (10 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (11 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (12 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (13 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (14 : int))) = (114 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (16 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (17 : int))) = (102 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (19 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (20 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (21 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (22 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (23 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (24 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (25 : int))) = (108 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (26 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (27 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (28 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (29 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (30 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (31 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (32 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (33 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (34 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (35 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (36 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (37 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (38 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (39 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (40 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (41 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (42 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (43 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (44 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (45 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (46 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (47 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_276 __void_param) (48 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:44, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_280
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_280 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_280__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_280 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (3 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (5 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (7 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (10 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (11 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (12 : int))) = (97 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (13 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (14 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (15 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (17 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (18 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (19 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (20 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (21 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (22 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (23 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (24 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (25 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (26 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (27 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (28 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (29 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (30 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (31 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (33 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (34 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (35 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (36 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (37 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (38 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (39 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (40 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_280 __void_param) (41 : int))) = (58 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:46, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_283
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_283 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_283__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_283 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (1 : int))) = (77 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (3 : int))) = (120 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (4 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (5 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (6 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (7 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (9 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (10 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (11 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (12 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (13 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (14 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (16 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (17 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (18 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (19 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (20 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (21 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (22 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (23 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (24 : int))) = (97 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (25 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (26 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (27 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (28 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (29 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (30 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (31 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (32 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (33 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (34 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (35 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (36 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (37 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (38 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (39 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (40 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (41 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (42 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (43 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (44 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_283 __void_param) (45 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:54, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_287
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_287 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_287__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_287 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (1 : int))) = (79 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (6 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (7 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (8 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (9 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (10 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (11 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (13 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (14 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (15 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (16 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (18 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (19 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (20 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (21 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (22 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (23 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (25 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (26 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (27 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (28 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_287 __void_param) (29 : int))) = (100 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:91, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_330
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_330 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_330__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_330 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (4 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (5 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (7 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (8 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (9 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (10 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (11 : int))) = (98 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (13 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (14 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (15 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (16 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (17 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (18 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (19 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (20 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (21 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (22 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_330 __void_param) (23 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:98, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_333
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_333 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_333__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_333 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:99, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_334
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_334 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_334__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_334 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (3 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (4 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (5 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (9 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (11 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (13 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (14 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (15 : int))) = (98 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (16 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (17 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (19 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (20 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (21 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (22 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (23 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (24 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (25 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (26 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (27 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (28 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (29 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (30 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (31 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (32 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (33 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (34 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (35 : int))) = (116 : int)) ) ) ) ) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (36 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (37 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (38 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (39 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (40 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (41 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (42 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (43 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (44 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (45 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (46 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (47 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (48 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (49 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (50 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (51 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (52 : int))) = (100 : int)) ) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (53 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (54 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (55 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (56 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (57 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (58 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (59 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (60 : int))) = (115 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (61 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (62 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (63 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (64 : int))) = (112 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (65 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (66 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (67 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_334 __void_param) (68 : int))) = (46 : int)) ) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:111, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_337
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_337 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_337__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_337 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (1 : int))) = (77 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (3 : int))) = (120 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (4 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (5 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (6 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (7 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (9 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (10 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (11 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (13 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (14 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (15 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (16 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (17 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (18 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (19 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (20 : int))) = (32 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (21 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (22 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (23 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (24 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (25 : int))) = (98 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (26 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (27 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (28 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (29 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (30 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (31 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (32 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (33 : int))) = (99 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (34 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (35 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (36 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_337 __void_param) (37 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:119, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_343
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_343 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_343__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_343 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (1 : int))) = (33 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (2 : int))) = (33 : int)) )/\( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (3 : int))) = (82 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (5 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (6 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (7 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (8 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (9 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (10 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (11 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (12 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (13 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (14 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (15 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (16 : int))) = (119 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (17 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (18 : int))) = (79 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (19 : int))) = (86 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (20 : int))) = (69 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (21 : int))) = (82 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (22 : int))) = (72 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (23 : int))) = (69 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (24 : int))) = (65 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (25 : int))) = (84 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (26 : int))) = (69 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (27 : int))) = (68 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (28 : int))) = (46 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (29 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (30 : int))) = (80 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (31 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (32 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (33 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (34 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (35 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (36 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (37 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (38 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (39 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (40 : int))) = (112 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (41 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (42 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (43 : int))) = (104 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (44 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (45 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (46 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (47 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (48 : int))) = (97 : int)) ) ) ) ) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (49 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (50 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (51 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (52 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (53 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (54 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (55 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (56 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (57 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (58 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (59 : int))) = (119 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (60 : int))) = (97 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (61 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (62 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (63 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (64 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (65 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (66 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (67 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (68 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (69 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (70 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (71 : int))) = (33 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (72 : int))) = (33 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (73 : int))) = (33 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (74 : int))) = (82 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (75 : int))) = (69 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (76 : int))) = (65 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (77 : int))) = (67 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (78 : int))) = (84 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (79 : int))) = (79 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (80 : int))) = (82 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (81 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (82 : int))) = (79 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (83 : int))) = (86 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (84 : int))) = (69 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (85 : int))) = (82 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (86 : int))) = (72 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (87 : int))) = (69 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (88 : int))) = (65 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (89 : int))) = (84 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (90 : int))) = (69 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (91 : int))) = (68 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (92 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_343 __void_param) (93 : int))) = (32 : int)) ) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:128, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_353
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_353 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_353__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_353 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_353 __void_param) (1 : int))) = (32 : int)))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:129, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_354
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_354 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_354__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_354 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (1 : int))) = (85 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (2 : int))) = (115 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (5 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (7 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (8 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (9 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (10 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (11 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (12 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (13 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (14 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (15 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (16 : int))) = (112 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (17 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (18 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (19 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (20 : int))) = (102 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (21 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (22 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (23 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (24 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (25 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (26 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (28 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (29 : int))) = (111 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (30 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (31 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (32 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (33 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (34 : int))) = (87 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (35 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (36 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (37 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (38 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (39 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (40 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (41 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (42 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (43 : int))) = (112 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (44 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (45 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (46 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (47 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (48 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (49 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (50 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (51 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (52 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (53 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (54 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (55 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_354 __void_param) (56 : int))) = (58 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:132, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_357
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_357 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_357__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_357 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (4 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (5 : int))) = (102 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (6 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (7 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (8 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (9 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (10 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (11 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (12 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (13 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (14 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (15 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (16 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (17 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (18 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (19 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (20 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (21 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (22 : int))) = (112 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (23 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (24 : int))) = (108 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (25 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (26 : int))) = (46 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (27 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (28 : int))) = (84 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (29 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (30 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (31 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (32 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (33 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (34 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (35 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (36 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (37 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (38 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (39 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (40 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (41 : int))) = (112 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (42 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (43 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (44 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (45 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (46 : int))) = (116 : int)) ) ) ) ) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (47 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (48 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (49 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (50 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (51 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (52 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (53 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (54 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (55 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (56 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (57 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (58 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (59 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (60 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (61 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (62 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (63 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (64 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (65 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (66 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (67 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (68 : int))) = (110 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (69 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (70 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (71 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (72 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (73 : int))) = (102 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (74 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (75 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (76 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (77 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (78 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (79 : int))) = (97 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (80 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (81 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (82 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (83 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (84 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (85 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (86 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (87 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (88 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (89 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_357 __void_param) (90 : int))) = (46 : int)) ) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at nucleartrain.adb:140, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_364
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_364 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_364__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_364 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (2 : int))) = (97 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (7 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (8 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (9 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (10 : int))) = (112 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (11 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (12 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (14 : int))) = (104 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (15 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (16 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (17 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (18 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (19 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (21 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (22 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (23 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (24 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (25 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (26 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (27 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (28 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (29 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (30 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_364 __void_param) (31 : int))) = (58 : int)) ) ) ) ) ))

end
(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   ada__text_io__file_system   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err ada__text_io__file_system) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "invariant" defined at nucleartrain.ads:47, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Nucleartrain__invariant___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorcontrolrod__rep as Nucleartrain__reactorcontrolrod__rep

 val invariant__ 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard result Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )/\( (result = True) <-> ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) >= (1 : int)) ) ) }
  reads {Nucleartrain__train.train__split_fields}
 
 axiom invariant____post_axiom :
  (forall nucleartrain__train__fields   : Nucleartrain__trainspecs.__split_fields [(Nucleartrain__invariant.invariant__ nucleartrain__train__fields)].
   ( (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = nucleartrain__train__fields } True True True True) -> (let result = (Nucleartrain__invariant.invariant__ nucleartrain__train__fields) in (
    (if ((Nucleartrain__invariant.invariant____function_guard result nucleartrain__train__fields)) then (
     ( ( true /\ true )/\true )) else true)))
    ))
 
 axiom invariant____def_axiom :
  (forall nucleartrain__train__fields   : Nucleartrain__trainspecs.__split_fields [(Nucleartrain__invariant.invariant__ nucleartrain__train__fields)].
   ( (let result = (Nucleartrain__invariant.invariant__ nucleartrain__train__fields) in (
    (Nucleartrain__invariant.invariant____function_guard result nucleartrain__train__fields)))
    -> ( ((Nucleartrain__invariant.invariant__ nucleartrain__train__fields) = True) <-> ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = nucleartrain__train__fields }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) >= (1 : int)) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "initiatereactor" defined at nucleartrain.ads:50, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__initiatereactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val initiatereactor 
   (__void_param : unit) : unit
  requires {  ( [@GP_Pretty_Ada:19561] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (1 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19575] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "maintenancereactor" defined at nucleartrain.ads:55, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__maintenancereactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val maintenancereactor 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:3523] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3529] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19639] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (1 : int)) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "insertcontrolrod" defined at nucleartrain.ads:61, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__insertcontrolrod___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorcontrolrod__rep as Nucleartrain__reactorcontrolrod__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val insertcontrolrod 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:3565] ((epsilon temp___result_242 : bool.
   ( (temp___result_242 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_242 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) /\ ( [@GP_Pretty_Ada:3573] ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) < (5 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19707] ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) = ((Nucleartrain__reactorcontrolrod__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods )) + (1 : int))) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "removecontrolrod" defined at nucleartrain.ads:67, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__removecontrolrod___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorcontrolrod__rep as Nucleartrain__reactorcontrolrod__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val removecontrolrod 
   (__void_param : unit) : unit
  requires {  ( [@GP_Pretty_Ada:19752] ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) > (1 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19773] ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) = ((Nucleartrain__reactorcontrolrod__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods )) - (1 : int))) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "addonecarriage" defined at nucleartrain.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__addonecarriage___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages
 use        Nucleartrain__passengerscarriages__rep as Nucleartrain__passengerscarriages__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val addonecarriage 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:3674] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3680] ((Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages) < (5 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19839] ((Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages) = ((Nucleartrain__passengerscarriages__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages )) + (1 : int))) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "removeonecarriage" defined at nucleartrain.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__removeonecarriage___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages
 use        Nucleartrain__passengerscarriages__rep as Nucleartrain__passengerscarriages__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val removeonecarriage 
   (__void_param : unit) : unit
  requires {  ( [@GP_Pretty_Ada:19882] ((Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages) > (0 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:19899] ((Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages) = ((Nucleartrain__passengerscarriages__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages )) - (1 : int))) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "reactoronline" defined at nucleartrain.ads:83, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__reactoronline___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated
 use        Nucleartrain__reactorelectricitygenerated__rep as Nucleartrain__reactorelectricitygenerated__rep
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep

 val reactoronline 
   (__void_param : unit) : unit
  requires {  ( ( ( ( ( [@GP_Pretty_Ada:3767] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) < (294 : int)) ) /\ ( [@GP_Pretty_Ada:3777] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) < (100 : int)) ) ) /\ ( [@GP_Pretty_Ada:3783] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) < (Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed)) ) ) /\ ( [@GP_Pretty_Ada:3793] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3794] ((epsilon temp___result_243 : bool.
   ( (temp___result_243 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_243 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:3805] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) > (Nucleartrain__reactortemperature__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature ))) ) /\ ( [@GP_Pretty_Ada:3817] ((Nucleartrain__reactorelectricitygenerated__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity) <> (0 : int)) ) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Nucleartrain__train.train__split_fields}
  writes {Nucleartrain__train.train__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "starttrain" defined at nucleartrain.ads:94, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__starttrain___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep

 val starttrain 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3841] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3842] ((epsilon temp___result_244 : bool.
   ( (temp___result_244 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_244 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:3851] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:20047] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) > (0 : int)) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Nucleartrain__train.train__split_fields}
  writes {Nucleartrain__train.train__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "stoptrain" defined at nucleartrain.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__stoptrain___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated
 use        Nucleartrain__reactorelectricitygenerated__rep as Nucleartrain__reactorelectricitygenerated__rep
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val stoptrain 
   (__void_param : unit) : unit
  requires {  ( [@GP_Pretty_Ada:20095] ( ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) >= (0 : int)) \/ ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) <= (0 : int)) ) ) }
  ensures {  ( ( ( ( ( [@GP_Pretty_Ada:3903] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3909] ((Nucleartrain__reactorelectricitygenerated__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3917] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3925] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed) = (0 : int)) ) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "settrainmaximumspeed" defined at nucleartrain.ads:109, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__settrainmaximumspeed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val settrainmaximumspeed 
   (__void_param : unit) : unit
  requires {  ( [@GP_Pretty_Ada:20170] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) >= (0 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:20182] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) >= (0 : int)) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "trainacceleration" defined at nucleartrain.ads:114, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__trainacceleration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val trainacceleration 
   (__void_param : unit) : unit
  requires {  ( ( ( ( [@GP_Pretty_Ada:3988] ((epsilon temp___result_245 : bool.
   ( (temp___result_245 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_245 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) /\ ( [@GP_Pretty_Ada:3996] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:4002] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) < (100 : int)) ) ) /\ ( [@GP_Pretty_Ada:4008] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) < (Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:20259] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = ((Standard__integer__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed )) + (1 : int))) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "warnreactoroverheat" defined at nucleartrain.ads:122, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__warnreactoroverheat___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Nucleartrain__reactoroverheated as Nucleartrain__reactoroverheated
 use        Nucleartrain__reactoroverheated__rep as Nucleartrain__reactoroverheated__rep
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val warnreactoroverheat 
   (__void_param : unit) : unit
  requires {  ( ( ( ( [@GP_Pretty_Ada:4050] ((epsilon temp___result_246 : bool.
   ( (temp___result_246 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_246 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) /\ ( [@GP_Pretty_Ada:4058] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) >= (200 : int)) ) ) /\ ( [@GP_Pretty_Ada:4066] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:4074] ((Nucleartrain__reactoroverheated__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat) = (0 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:20335] ((Nucleartrain__reactoroverheated__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat) = (1 : int)) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "watercooldownreactor" defined at nucleartrain.ads:130, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__watercooldownreactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__reactorwatersupply as Nucleartrain__reactorwatersupply
 use        Nucleartrain__reactorwatersupply__rep as Nucleartrain__reactorwatersupply__rep
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val watercooldownreactor 
   (__void_param : unit) : unit
  requires {  ( ( ( ( [@GP_Pretty_Ada:4110] ((epsilon temp___result_247 : bool.
   ( (temp___result_247 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_247 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) /\ ( [@GP_Pretty_Ada:4116] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:4124] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) >= (200 : int)) ) ) /\ ( [@GP_Pretty_Ada:4132] ((Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water) >= (2 : int)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:4142] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) = ((Nucleartrain__reactortemperature__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature )) - (50 : int))) ) /\ ( [@GP_Pretty_Ada:4158] ((Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water) = ((Nucleartrain__reactorwatersupply__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water )) - (2 : int))) ) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "refillwatersupply" defined at nucleartrain.ads:139, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Nucleartrain__refillwatersupply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__reactorwatersupply as Nucleartrain__reactorwatersupply
 use        Nucleartrain__reactorwatersupply__rep as Nucleartrain__reactorwatersupply__rep
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val refillwatersupply 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:4196] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:4204] ((Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water) < (20 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:20497] ((Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water) = (20 : int)) ) /\ (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Nucleartrain__train.train__split_fields, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:7586] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:7592] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Ada__text_io__file_system.file_system}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "nucleartrain" defined at nucleartrain.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Nucleartrain__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer as Standard__integer
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Nucleartrain__reactor as Nucleartrain__reactor
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorwatersupply as Nucleartrain__reactorwatersupply
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactoroverheated as Nucleartrain__reactoroverheated
 use        Nucleartrain__reactoroverheated__rep as Nucleartrain__reactoroverheated__rep
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__reactor___axiom as Nucleartrain__reactor___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"nucleartrain.ads" 3 0 0][@GP_Subp:nucleartrain.ads:3] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 3 0 0] true }
   = [@vc:divergent]
  ( [#"nucleartrain.ads" 3 0 0] assume { [#"nucleartrain.ads" 3 0 0] ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"nucleartrain.ads" 3 0 0] ());
  ([#"nucleartrain.ads" 6 0 0] ());
  ([#"nucleartrain.ads" 7 0 0] ());
  ([#"nucleartrain.ads" 8 0 0] ());
  ([#"nucleartrain.ads" 9 0 0] ());
  ([#"nucleartrain.ads" 10 0 0] ());
  ([#"nucleartrain.ads" 11 0 0] ());
  ([#"nucleartrain.ads" 12 0 0] ());
  ([#"nucleartrain.ads" 15 0 0] ());
  ([#"nucleartrain.ads" 16 0 0] ());
  ([#"nucleartrain.ads" 18 0 0] ());
  ([#"nucleartrain.ads" 26 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ());
  ([#"nucleartrain.ads" 34 0 0] ( (let nucleartrain__reactor__assume = { Nucleartrain__reactorspecs.__split_fields = { Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods = ( 5 : Nucleartrain__reactorcontrolrod.reactorcontrolrod ); Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water = ( 20 : Nucleartrain__reactorwatersupply.reactorwatersupply ); Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature = ( 0 : Nucleartrain__reactortemperature.reactortemperature ); Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat = (Nucleartrain__reactoroverheated__rep.of_rep((0 : int))); Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state = (Nucleartrain__reactorstate__rep.of_rep((0 : int))) } } in (
   [#"nucleartrain.ads" 34 0 0] (Nucleartrain__reactor.reactor__split_fields.Nucleartrain__reactorspecs.__split_fields__content <- ( nucleartrain__reactor__assume.Nucleartrain__reactorspecs.__split_fields ))))
  ;
  [#"nucleartrain.ads" 34 0 0] assume { [#"nucleartrain.ads" 34 0 0] (Nucleartrain__reactorspecs___axiom.dynamic_invariant { Nucleartrain__reactorspecs.__split_fields = Nucleartrain__reactor.reactor__split_fields.Nucleartrain__reactorspecs.__split_fields__content } True False True True) } ));
  ([#"nucleartrain.ads" 40 0 0] ());
  ([#"nucleartrain.ads" 40 0 0] ());
  ([#"nucleartrain.ads" 40 0 0] ());
  ([#"nucleartrain.ads" 40 0 0] ());
  ([#"nucleartrain.ads" 40 0 0] ());
  ([#"nucleartrain.ads" 40 0 0] ());
  ([#"nucleartrain.ads" 40 0 0] ( (let nucleartrain__train__assume = { Nucleartrain__trainspecs.__split_fields = { Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = { Nucleartrain__reactorspecs.__split_fields = Nucleartrain__reactor.reactor__split_fields.Nucleartrain__reactorspecs.__split_fields__content }; Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity = ( 0 : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated ); Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages = ( 0 : Nucleartrain__passengerscarriages.passengerscarriages ); Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed = ( 0 : Standard__integer.integer ); Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed = ( 0 : Standard__integer.integer ) } } in (
   [#"nucleartrain.ads" 40 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( nucleartrain__train__assume.Nucleartrain__trainspecs.__split_fields ))))
  ;
  [#"nucleartrain.ads" 40 0 0] assume { [#"nucleartrain.ads" 40 0 0] (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) } ));
  ([#"nucleartrain.ads" 47 0 0] ());
  ([#"nucleartrain.ads" 50 0 0] ());
  ([#"nucleartrain.ads" 53 0 0] ());
  ([#"nucleartrain.ads" 52 0 0] ());
  ([#"nucleartrain.ads" 51 0 0] ());
  ([#"nucleartrain.ads" 55 0 0] ());
  ([#"nucleartrain.ads" 59 0 0] ());
  ([#"nucleartrain.ads" 57 0 0] ());
  ([#"nucleartrain.ads" 56 0 0] ());
  ([#"nucleartrain.ads" 61 0 0] ());
  ([#"nucleartrain.ads" 65 0 0] ());
  ([#"nucleartrain.ads" 63 0 0] ());
  ([#"nucleartrain.ads" 62 0 0] ());
  ([#"nucleartrain.ads" 67 0 0] ());
  ([#"nucleartrain.ads" 70 0 0] ());
  ([#"nucleartrain.ads" 69 0 0] ());
  ([#"nucleartrain.ads" 68 0 0] ());
  ([#"nucleartrain.ads" 72 0 0] ());
  ([#"nucleartrain.ads" 76 0 0] ());
  ([#"nucleartrain.ads" 74 0 0] ());
  ([#"nucleartrain.ads" 73 0 0] ());
  ([#"nucleartrain.ads" 78 0 0] ());
  ([#"nucleartrain.ads" 81 0 0] ());
  ([#"nucleartrain.ads" 80 0 0] ());
  ([#"nucleartrain.ads" 79 0 0] ());
  ([#"nucleartrain.ads" 83 0 0] ());
  ([#"nucleartrain.ads" 90 0 0] ());
  ([#"nucleartrain.ads" 85 0 0] ());
  ([#"nucleartrain.ads" 84 0 0] ());
  ([#"nucleartrain.ads" 94 0 0] ());
  ([#"nucleartrain.ads" 99 0 0] ());
  ([#"nucleartrain.ads" 96 0 0] ());
  ([#"nucleartrain.ads" 95 0 0] ());
  ([#"nucleartrain.ads" 101 0 0] ());
  ([#"nucleartrain.ads" 104 0 0] ());
  ([#"nucleartrain.ads" 103 0 0] ());
  ([#"nucleartrain.ads" 102 0 0] ());
  ([#"nucleartrain.ads" 109 0 0] ());
  ([#"nucleartrain.ads" 112 0 0] ());
  ([#"nucleartrain.ads" 111 0 0] ());
  ([#"nucleartrain.ads" 110 0 0] ());
  ([#"nucleartrain.ads" 114 0 0] ());
  ([#"nucleartrain.ads" 120 0 0] ());
  ([#"nucleartrain.ads" 116 0 0] ());
  ([#"nucleartrain.ads" 115 0 0] ());
  ([#"nucleartrain.ads" 122 0 0] ());
  ([#"nucleartrain.ads" 128 0 0] ());
  ([#"nucleartrain.ads" 124 0 0] ());
  ([#"nucleartrain.ads" 123 0 0] ());
  ([#"nucleartrain.ads" 130 0 0] ());
  ([#"nucleartrain.ads" 136 0 0] ());
  ([#"nucleartrain.ads" 132 0 0] ());
  ([#"nucleartrain.ads" 131 0 0] ());
  ([#"nucleartrain.ads" 139 0 0] ());
  ([#"nucleartrain.ads" 143 0 0] ());
  ([#"nucleartrain.ads" 141 0 0] ());
  ([#"nucleartrain.ads" 140 0 0] ());
  ([#"nucleartrain.ads" 47 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"nucleartrain.adb" 3 0 0] ());
  ([#"nucleartrain.adb" 6 0 0] ());
  ([#"nucleartrain.adb" 12 0 0] ());
  ([#"nucleartrain.adb" 20 0 0] ());
  ([#"nucleartrain.adb" 30 0 0] ());
  ([#"nucleartrain.adb" 40 0 0] ());
  ([#"nucleartrain.adb" 50 0 0] ());
  ([#"nucleartrain.adb" 58 0 0] ());
  ([#"nucleartrain.adb" 78 0 0] ());
  ([#"nucleartrain.adb" 85 0 0] ());
  ([#"nucleartrain.adb" 94 0 0] ());
  ([#"nucleartrain.adb" 104 0 0] ());
  ([#"nucleartrain.adb" 115 0 0] ());
  ([#"nucleartrain.adb" 123 0 0] ());
  ([#"nucleartrain.adb" 136 0 0] ());
  ();
  ( [@GP_Sloc:nucleartrain.adb:144:1] ([#"nucleartrain.adb" 144 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "invariant" defined at nucleartrain.ads:47, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__invariant__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorcontrolrod__rep as Nucleartrain__reactorcontrolrod__rep
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom

 val nucleartrain__invariant__result [@model_projected] [@model_trace:3432@result] [@name:Invariant]  : bool__ref 
 
 let def [#"nucleartrain.ads" 47 0 0][@GP_Subp:nucleartrain.ads:47] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 47 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:47 *)
  ;
  [#"nucleartrain.ads" 47 0 0] assume { [#"nucleartrain.ads" 47 0 0] (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:47 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:47 *)
  ;
  [#"nucleartrain.ads" 47 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:47 *)
  ;
  [#"nucleartrain.ads" 47 0 0] try
   ( ();
   ( [@GP_Sloc:nucleartrain.ads:48:32] ([#"nucleartrain.ads" 48 0 0] ( [#"nucleartrain.ads" 48 0 0] (nucleartrain__invariant__result.bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) >= (1 : int)) ));
   [#"nucleartrain.ads" 48 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  nucleartrain__invariant__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "initiatereactor" defined at nucleartrain.ads:50, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__initiatereactor__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Temp___String_Literal_252 as Temp___String_Literal_252
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 50 0 0][@GP_Subp:nucleartrain.ads:50] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 50 0 0] true }
  ensures { [#"nucleartrain.ads" 50 0 0] ([#"nucleartrain.ads" 53 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => train.engineReactor.state = Online;              ^ nucleartrain.ads:53:14:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:nucleartrain.ads:53:14] [@model_vc_post] [@GP_Id:1] ( [@GP_Sloc:nucleartrain.ads:53:14] [@GP_Pretty_Ada:19575] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:50 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:50 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:50 *)
  ;
   begin ensures {true} let _ = (let _ = ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (1 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:50 *)
  ;
   assume {  ( [@GP_Pretty_Ada:19561] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (1 : int)) ) };
   try
   ( ();
   ( [@GP_Sloc:nucleartrain.adb:8:7] ([#"nucleartrain.adb" 8 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:8:33] ([#"nucleartrain.adb" 8 0 0] (let temp___251 [@mlw:proxy_symbol] [@introduced] = (let temp___250 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
    ( [#"nucleartrain.adb" 8 0 0] begin ensures {true} let _ = (let _ = temp___250.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
     ()))
     in () end ;
    { ( temp___250 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___250.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___249 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
     ( [#"nucleartrain.adb" 8 0 0] begin ensures {true} let _ = (let _ = temp___249.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state in (
      ()))
      in () end ;
     { ( temp___249 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___249.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state = (Nucleartrain__reactorstate__rep.of_rep((0 : int))) } } )))
     } } )))
    in (
    [#"nucleartrain.adb" 8 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___251.Nucleartrain__trainspecs.__split_fields ))))
   ) );
   ( [@GP_Sloc:nucleartrain.adb:9:9] ([#"nucleartrain.adb" 9 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:9:9] ([#"nucleartrain.adb" 9 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___254 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__reactorstate.attr__ATTRIBUTE_IMAGE((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state))))) ((2040 : int))) in (
   (let temp___253 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_252.temp___String_Literal_252(())) in (
    (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___253) ((1 : int)) ((14 : int)) ((Standard__string.to_array(temp___254))) ((Standard__string.first(temp___254))) ((Standard__string.last(temp___254))))) ((1 : int)) (([#"nucleartrain.adb" 9 0 0] ( [@vc:annotation] [@GP_Sloc:nucleartrain.adb:9:35] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:0] [@GP_Shape:call_put_line__2__concat] [@comment:        Put_Line ("Reactor state:"& train.engineReactor.state'Image);                                   ^ nucleartrain.adb:9:35:VC_RANGE_CHECK] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((14 : int))) + (Integer.length((Standard__string.first(temp___254))) ((Standard__string.last(temp___254)))))) - (1 : int)))) ))))))
   ))
   )) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "maintenancereactor" defined at nucleartrain.ads:55, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__maintenancereactor__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Temp___String_Literal_258 as Temp___String_Literal_258
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 55 0 0][@GP_Subp:nucleartrain.ads:55] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 55 0 0] true }
  ensures { [#"nucleartrain.ads" 55 0 0] ([#"nucleartrain.ads" 59 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => train.engineReactor.state = Offline;              ^ nucleartrain.ads:59:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:3] [@GP_Sloc:nucleartrain.ads:59:14] ( [@GP_Pretty_Ada:19639] [@GP_Sloc:nucleartrain.ads:59:14] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (1 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:55 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:55 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:55 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:55 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3523] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3529] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:nucleartrain.adb:14:11] ([#"nucleartrain.adb" 14 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:14:7] ([#"nucleartrain.adb" 14 0 0] (if (( ([#"nucleartrain.adb" 14 0 0] [#"nucleartrain.adb" 14 0 0] (([@branch_id=2354] Main.spark__branch).bool__content <- ( ( ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) ) )));
   ( [@branch_id=2354] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:15:10] ([#"nucleartrain.adb" 15 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:15:36] ([#"nucleartrain.adb" 15 0 0] (let temp___257 [@mlw:proxy_symbol] [@introduced] = (let temp___256 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
     ( [#"nucleartrain.adb" 15 0 0] begin ensures {true} let _ = (let _ = temp___256.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
      ()))
      in () end ;
     { ( temp___256 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___256.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___255 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
      ( [#"nucleartrain.adb" 15 0 0] begin ensures {true} let _ = (let _ = temp___255.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state in (
       ()))
       in () end ;
      { ( temp___255 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___255.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state = (Nucleartrain__reactorstate__rep.of_rep((1 : int))) } } )))
      } } )))
     in (
     [#"nucleartrain.adb" 15 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___257.Nucleartrain__trainspecs.__split_fields ))))
    ) );
    ( [@GP_Sloc:nucleartrain.adb:16:10] ([#"nucleartrain.adb" 16 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:16:10] ([#"nucleartrain.adb" 16 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___260 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__reactorstate.attr__ATTRIBUTE_IMAGE((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state))))) ((2040 : int))) in (
    (let temp___259 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_258.temp___String_Literal_258(())) in (
     (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___259) ((1 : int)) ((14 : int)) ((Standard__string.to_array(temp___260))) ((Standard__string.first(temp___260))) ((Standard__string.last(temp___260))))) ((1 : int)) (([#"nucleartrain.adb" 16 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@comment:         Put_Line("Reactor state:"& train.engineReactor.state'Image);                                   ^ nucleartrain.adb:16:35:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:16:35] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:2] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((14 : int))) + (Integer.length((Standard__string.first(temp___260))) ((Standard__string.last(temp___260)))))) - (1 : int)))) ))))))
    ))
    )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (1 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "insertcontrolrod" defined at nucleartrain.ads:61, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__insertcontrolrod__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorcontrolrod__rep as Nucleartrain__reactorcontrolrod__rep
 use        Temp___String_Literal_264 as Temp___String_Literal_264
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_267 as Temp___String_Literal_267
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 61 0 0][@GP_Subp:nucleartrain.ads:61] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 61 0 0] true }
  ensures { [#"nucleartrain.ads" 61 0 0] ([#"nucleartrain.ads" 65 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:nucleartrain.ads:65:14] [@model_vc_post] [@GP_Id:6] [@comment:     Post => train.engineReactor.rods = train.engineReactor.rods'Old + 1;              ^ nucleartrain.ads:65:14:VC_POSTCONDITION] ( [@GP_Sloc:nucleartrain.ads:65:14] [@GP_Pretty_Ada:19707] ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) = ((Nucleartrain__reactorcontrolrod__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods )) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:61 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:61 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:61 *)
  ;
   begin ensures {true} let _ = (let _ = ( (Nucleartrain__invariant___axiom.invariant__(())) && ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) < (5 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:61 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3565] ((epsilon temp___result_269 : bool.
   ( (temp___result_269 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_269 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) /\ ( [@GP_Pretty_Ada:3573] ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) < (5 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods in (
   ()))
   in () end ;
  (let temp___old_268 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:22:10] ([#"nucleartrain.adb" 22 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:22:7] ([#"nucleartrain.adb" 22 0 0] (if (( ([#"nucleartrain.adb" 22 0 0] [#"nucleartrain.adb" 22 0 0] (([@branch_id=2398] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) < (5 : int)) )));
    ( [@branch_id=2398] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:nucleartrain.adb:23:10] ([#"nucleartrain.adb" 23 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:23:37] ([#"nucleartrain.adb" 23 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:23:34] ([#"nucleartrain.adb" 23 0 0] (let temp___263 [@mlw:proxy_symbol] [@introduced] = (let temp___262 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
      ( [#"nucleartrain.adb" 23 0 0] begin ensures {true} let _ = (let _ = temp___262.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
       ()))
       in () end ;
      { ( temp___262 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___262.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___261 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
       ( [#"nucleartrain.adb" 23 0 0] begin ensures {true} let _ = (let _ = temp___261.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods in (
        ()))
        in () end ;
       { ( temp___261 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___261.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods = (Nucleartrain__reactorcontrolrod__rep.of_rep(([#"nucleartrain.adb" 23 0 0] ( [@GP_Sloc:nucleartrain.adb:23:62] [@GP_Shape:if__train_assign__add] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:         train.engineReactor.rods:= train.engineReactor.rods + 1;                                                              ^ nucleartrain.adb:23:62:VC_RANGE_CHECK] [@GP_Id:4] (Nucleartrain__reactorcontrolrod.range_check_(((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) + (1 : int)))) )))) } } )))
       } } )))
      in (
       (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___263.Nucleartrain__trainspecs.__split_fields ))))
     ) );
     ( [@GP_Sloc:nucleartrain.adb:24:10] ([#"nucleartrain.adb" 24 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:24:10] ([#"nucleartrain.adb" 24 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___266 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__reactorcontrolrod.attr__ATTRIBUTE_IMAGE((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods))))) ((5 : int))) in (
     (let temp___265 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_264.temp___String_Literal_264(())) in (
      (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___265) ((1 : int)) ((44 : int)) ((Standard__string.to_array(temp___266))) ((Standard__string.first(temp___266))) ((Standard__string.last(temp___266))))) ((1 : int)) (([#"nucleartrain.adb" 24 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@vc:annotation] [@GP_Sloc:nucleartrain.adb:24:65] [@comment:         Put_Line("An additional control rod has been inserted:"&train.engineReactor.rods'Image);                                                                 ^ nucleartrain.adb:24:65:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:5] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((44 : int))) + (Integer.length((Standard__string.first(temp___266))) ((Standard__string.last(temp___266)))))) - (1 : int)))) ))))))
     ))
     )) )) ) )) else (
     ( [@GP_Sloc:nucleartrain.adb:25:7] (if (( ([#"nucleartrain.adb" 25 0 0] [#"nucleartrain.adb" 25 0 0] (([@branch_id=2432] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (5 : int)) )));
     ( [@branch_id=2432] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:nucleartrain.adb:26:10] ([#"nucleartrain.adb" 26 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:26:10] ([#"nucleartrain.adb" 26 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_267.temp___String_Literal_267(()))) ((1 : int)) ((48 : int))))) )) ) )) else (
      ())) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (temp___old_268 + (1 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "removecontrolrod" defined at nucleartrain.ads:67, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__removecontrolrod__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorcontrolrod__rep as Nucleartrain__reactorcontrolrod__rep
 use        Temp___String_Literal_273 as Temp___String_Literal_273
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_276 as Temp___String_Literal_276
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 67 0 0][@GP_Subp:nucleartrain.ads:67] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 67 0 0] true }
  ensures { [#"nucleartrain.ads" 67 0 0] ([#"nucleartrain.ads" 70 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => train.engineReactor.rods = train.engineReactor.rods'Old - 1;              ^ nucleartrain.ads:70:14:VC_POSTCONDITION] [@GP_Sloc:nucleartrain.ads:70:14] [@model_vc_post] [@GP_Id:9] ( [@GP_Sloc:nucleartrain.ads:70:14] [@GP_Pretty_Ada:19773] ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) = ((Nucleartrain__reactorcontrolrod__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods )) - (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:67 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:67 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:67 *)
  ;
   begin ensures {true} let _ = (let _ = ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) > (1 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:67 *)
  ;
   assume {  ( [@GP_Pretty_Ada:19752] ((Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods) > (1 : int)) ) };
   begin ensures {true} let _ = (let _ = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods in (
   ()))
   in () end ;
  (let temp___old_277 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Nucleartrain__reactorcontrolrod__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:32:11] ([#"nucleartrain.adb" 32 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:32:7] ([#"nucleartrain.adb" 32 0 0] (if (( ([#"nucleartrain.adb" 32 0 0] [#"nucleartrain.adb" 32 0 0] (([@branch_id=2457] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) > (1 : int)) )));
    ( [@branch_id=2457] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:nucleartrain.adb:33:10] ([#"nucleartrain.adb" 33 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:33:37] ([#"nucleartrain.adb" 33 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:33:34] ([#"nucleartrain.adb" 33 0 0] (let temp___272 [@mlw:proxy_symbol] [@introduced] = (let temp___271 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
      ( [#"nucleartrain.adb" 33 0 0] begin ensures {true} let _ = (let _ = temp___271.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
       ()))
       in () end ;
      { ( temp___271 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___271.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___270 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
       ( [#"nucleartrain.adb" 33 0 0] begin ensures {true} let _ = (let _ = temp___270.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods in (
        ()))
        in () end ;
       { ( temp___270 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___270.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods = (Nucleartrain__reactorcontrolrod__rep.of_rep(([#"nucleartrain.adb" 33 0 0] ( [@GP_Sloc:nucleartrain.adb:33:62] [@comment:         train.engineReactor.rods:= train.engineReactor.rods - 1;                                                              ^ nucleartrain.adb:33:62:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:if__train_assign__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:7] (Nucleartrain__reactorcontrolrod.range_check_(((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) - (1 : int)))) )))) } } )))
       } } )))
      in (
       (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___272.Nucleartrain__trainspecs.__split_fields ))))
     ) );
     ( [@GP_Sloc:nucleartrain.adb:34:10] ([#"nucleartrain.adb" 34 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:34:10] ([#"nucleartrain.adb" 34 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___275 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__reactorcontrolrod.attr__ATTRIBUTE_IMAGE((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods))))) ((5 : int))) in (
     (let temp___274 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_273.temp___String_Literal_273(())) in (
      (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___274) ((1 : int)) ((33 : int)) ((Standard__string.to_array(temp___275))) ((Standard__string.first(temp___275))) ((Standard__string.last(temp___275))))) ((1 : int)) (([#"nucleartrain.adb" 34 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:34:54] [@comment:         Put_Line("One control rod has been removed:"& train.engineReactor.rods'Image);                                                      ^ nucleartrain.adb:34:54:VC_RANGE_CHECK] [@GP_Id:8] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((33 : int))) + (Integer.length((Standard__string.first(temp___275))) ((Standard__string.last(temp___275)))))) - (1 : int)))) ))))))
     ))
     )) )) ) )) else (
     ( [@GP_Sloc:nucleartrain.adb:35:7] (if (( ([#"nucleartrain.adb" 35 0 0] [#"nucleartrain.adb" 35 0 0] (([@branch_id=2491] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (1 : int)) )));
     ( [@branch_id=2491] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:nucleartrain.adb:36:10] ([#"nucleartrain.adb" 36 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:36:10] ([#"nucleartrain.adb" 36 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_276.temp___String_Literal_276(()))) ((1 : int)) ((48 : int))))) )) ) )) else (
      ())) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (temp___old_277 - (1 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "addonecarriage" defined at nucleartrain.ads:72, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__addonecarriage__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages
 use        Nucleartrain__passengerscarriages__rep as Nucleartrain__passengerscarriages__rep
 use        Temp___String_Literal_280 as Temp___String_Literal_280
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_283 as Temp___String_Literal_283
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 72 0 0][@GP_Subp:nucleartrain.ads:72] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 72 0 0] true }
  ensures { [#"nucleartrain.ads" 72 0 0] ([#"nucleartrain.ads" 76 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:12] [@GP_Shape:pragargs__cmp] [@comment:     Post => train.carriages = train.carriages'Old + 1;              ^ nucleartrain.ads:76:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:nucleartrain.ads:76:14] ( [@GP_Pretty_Ada:19839] [@GP_Sloc:nucleartrain.ads:76:14] ((Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages) = ((Nucleartrain__passengerscarriages__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages )) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:72 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:72 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:72 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) && ((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) < (5 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:72 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3674] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3680] ((Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages) < (5 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages in (
   ()))
   in () end ;
  (let temp___old_284 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:42:11] ([#"nucleartrain.adb" 42 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:42:7] ([#"nucleartrain.adb" 42 0 0] (if (( ([#"nucleartrain.adb" 42 0 0] [#"nucleartrain.adb" 42 0 0] (([@branch_id=2516] Main.spark__branch).bool__content <- ( ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) && ((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) < (5 : int)) ) )));
    ( [@branch_id=2516] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:nucleartrain.adb:43:10] ([#"nucleartrain.adb" 43 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:43:29] ([#"nucleartrain.adb" 43 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:43:26] ([#"nucleartrain.adb" 43 0 0] (let temp___279 [@mlw:proxy_symbol] [@introduced] = (let temp___278 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
      ( [#"nucleartrain.adb" 43 0 0] begin ensures {true} let _ = (let _ = temp___278.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages in (
       ()))
       in () end ;
      { ( temp___278 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___278.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages = (Nucleartrain__passengerscarriages__rep.of_rep(([#"nucleartrain.adb" 43 0 0] ( [@GP_Id:10] [@GP_Shape:if__train_assign__add] [@vc:annotation] [@comment:         train.carriages := train.carriages + 1;                                             ^ nucleartrain.adb:43:45:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:43:45] (Nucleartrain__passengerscarriages.range_check_(((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) + (1 : int)))) )))) } } )))
      in (
       (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___279.Nucleartrain__trainspecs.__split_fields ))))
     ) );
     ( [@GP_Sloc:nucleartrain.adb:44:10] ([#"nucleartrain.adb" 44 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:44:10] ([#"nucleartrain.adb" 44 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___282 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__passengerscarriages.attr__ATTRIBUTE_IMAGE((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages))))) ((5 : int))) in (
     (let temp___281 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_280.temp___String_Literal_280(())) in (
      (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___281) ((1 : int)) ((41 : int)) ((Standard__string.to_array(temp___282))) ((Standard__string.first(temp___282))) ((Standard__string.last(temp___282))))) ((1 : int)) (([#"nucleartrain.adb" 44 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@GP_Id:11] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:44:62] [@comment:         Put_Line("An additional carriage has been attached:"& train.carriages'Image);                                                              ^ nucleartrain.adb:44:62:VC_RANGE_CHECK] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((41 : int))) + (Integer.length((Standard__string.first(temp___282))) ((Standard__string.last(temp___282)))))) - (1 : int)))) ))))))
     ))
     )) )) ) )) else (
     ( [@GP_Sloc:nucleartrain.adb:45:7] (if (( ([#"nucleartrain.adb" 45 0 0] [#"nucleartrain.adb" 45 0 0] (([@branch_id=2548] Main.spark__branch).bool__content <- ( ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) && ((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) = (5 : int)) ) )));
     ( [@branch_id=2548] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:nucleartrain.adb:46:13] ([#"nucleartrain.adb" 46 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:46:13] ([#"nucleartrain.adb" 46 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_283.temp___String_Literal_283(()))) ((1 : int)) ((45 : int))))) )) ) )) else (
      ())) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) = (temp___old_284 + (1 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "removeonecarriage" defined at nucleartrain.ads:78, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__removeonecarriage__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages
 use        Nucleartrain__passengerscarriages__rep as Nucleartrain__passengerscarriages__rep
 use        Temp___String_Literal_287 as Temp___String_Literal_287
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 78 0 0][@GP_Subp:nucleartrain.ads:78] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 78 0 0] true }
  ensures { [#"nucleartrain.ads" 78 0 0] ([#"nucleartrain.ads" 81 0 0] ( [@comment:     Post => train.carriages = train.carriages'Old - 1;              ^ nucleartrain.ads:81:14:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Id:15] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Sloc:nucleartrain.ads:81:14] ( [@GP_Pretty_Ada:19899] [@GP_Sloc:nucleartrain.ads:81:14] ((Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages) = ((Nucleartrain__passengerscarriages__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages )) - (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:78 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:78 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:78 *)
  ;
   begin ensures {true} let _ = (let _ = ((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) > (0 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:78 *)
  ;
   assume {  ( [@GP_Pretty_Ada:19882] ((Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages) > (0 : int)) ) };
   begin ensures {true} let _ = (let _ = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages in (
   ()))
   in () end ;
  (let temp___old_290 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Nucleartrain__passengerscarriages__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:52:11] ([#"nucleartrain.adb" 52 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:52:7] ([#"nucleartrain.adb" 52 0 0] (if (( ([#"nucleartrain.adb" 52 0 0] [#"nucleartrain.adb" 52 0 0] (([@branch_id=2577] Main.spark__branch).bool__content <- ( ((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) > (0 : int)) )));
    ( [@branch_id=2577] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:nucleartrain.adb:53:10] ([#"nucleartrain.adb" 53 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:53:29] ([#"nucleartrain.adb" 53 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:53:26] ([#"nucleartrain.adb" 53 0 0] (let temp___286 [@mlw:proxy_symbol] [@introduced] = (let temp___285 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
      ( [#"nucleartrain.adb" 53 0 0] begin ensures {true} let _ = (let _ = temp___285.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages in (
       ()))
       in () end ;
      { ( temp___285 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___285.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages = (Nucleartrain__passengerscarriages__rep.of_rep(([#"nucleartrain.adb" 53 0 0] ( [@GP_Id:13] [@vc:annotation] [@GP_Shape:if__train_assign__sub] [@GP_Reason:VC_RANGE_CHECK] [@comment:         train.carriages := train.carriages - 1;                                             ^ nucleartrain.adb:53:45:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:53:45] (Nucleartrain__passengerscarriages.range_check_(((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) - (1 : int)))) )))) } } )))
      in (
       (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___286.Nucleartrain__trainspecs.__split_fields ))))
     ) );
     ( [@GP_Sloc:nucleartrain.adb:54:10] ([#"nucleartrain.adb" 54 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:54:10] ([#"nucleartrain.adb" 54 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___289 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__passengerscarriages.attr__ATTRIBUTE_IMAGE((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages))))) ((5 : int))) in (
     (let temp___288 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_287.temp___String_Literal_287(())) in (
      (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___288) ((1 : int)) ((29 : int)) ((Standard__string.to_array(temp___289))) ((Standard__string.first(temp___289))) ((Standard__string.last(temp___289))))) ((1 : int)) (([#"nucleartrain.adb" 54 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@GP_Id:14] [@comment:         Put_Line("One carriage has been removed"& train.carriages'Image);                                                  ^ nucleartrain.adb:54:50:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:54:50] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((29 : int))) + (Integer.length((Standard__string.first(temp___289))) ((Standard__string.last(temp___289)))))) - (1 : int)))) ))))))
     ))
     )) )) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages)) = (temp___old_290 - (1 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "reactoronline" defined at nucleartrain.ads:83, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__reactoronline__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Nucleartrain__reactorcontrolrod as Nucleartrain__reactorcontrolrod
 use        Nucleartrain__reactorcontrolrod__rep as Nucleartrain__reactorcontrolrod__rep
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated
 use        Nucleartrain__reactorelectricitygenerated__rep as Nucleartrain__reactorelectricitygenerated__rep
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom

 let def [#"nucleartrain.ads" 83 0 0][@GP_Subp:nucleartrain.ads:83] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 83 0 0] true }
  ensures { [#"nucleartrain.ads" 83 0 0] ([#"nucleartrain.ads" 90 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__andthen] [@comment:     Post => train.engineReactor.temperature > train.engineReactor.temperature'Old              ^ nucleartrain.ads:90:14:VC_POSTCONDITION] [@GP_Sloc:nucleartrain.ads:90:14] [@model_vc_post] [@GP_Id:21] ( ( [@GP_Pretty_Ada:3805] [@GP_Sloc:nucleartrain.ads:90:14] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) > (Nucleartrain__reactortemperature__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature ))) ) /\ ( [@GP_Pretty_Ada:3817] [@GP_Sloc:nucleartrain.ads:92:15] ((Nucleartrain__reactorelectricitygenerated__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity) <> (0 : int)) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:83 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:83 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:83 *)
  ;
   begin ensures {true} let _ = (let _ = ( ( ( ( ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) < (294 : int)) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) < (100 : int)) ) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) < (Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed))) ) && ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) ) && (Nucleartrain__invariant___axiom.invariant__(())) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:83 *)
  ;
   assume {  ( ( ( ( ( [@GP_Pretty_Ada:3767] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) < (294 : int)) ) /\ ( [@GP_Pretty_Ada:3777] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) < (100 : int)) ) ) /\ ( [@GP_Pretty_Ada:3783] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) < (Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed)) ) ) /\ ( [@GP_Pretty_Ada:3793] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3794] ((epsilon temp___result_317 : bool.
   ( (temp___result_317 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_317 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) ) };
   begin ensures {true} let _ = (let _ = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
   ()))
   in () end ;
  (let temp___old_316 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:60:11] ([#"nucleartrain.adb" 60 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:60:7] ([#"nucleartrain.adb" 60 0 0] (if (( ([#"nucleartrain.adb" 60 0 0] [#"nucleartrain.adb" 60 0 0] (([@branch_id=2615] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (1 : int)) )));
    ( [@branch_id=2615] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:nucleartrain.adb:61:11] ([#"nucleartrain.adb" 61 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:61:29] ([#"nucleartrain.adb" 61 0 0] (let temp___292 [@mlw:proxy_symbol] [@introduced] = (let temp___291 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
      ( [#"nucleartrain.adb" 61 0 0] begin ensures {true} let _ = (let _ = temp___291.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity in (
       ()))
       in () end ;
      { ( temp___291 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___291.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity = ( 99 : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated ) } } )))
      in (
      [#"nucleartrain.adb" 61 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___292.Nucleartrain__trainspecs.__split_fields ))))
     ) );
     ( [@GP_Sloc:nucleartrain.adb:62:11] ([#"nucleartrain.adb" 62 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:62:46] ([#"nucleartrain.adb" 62 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:62:43] ([#"nucleartrain.adb" 62 0 0] (let temp___295 [@mlw:proxy_symbol] [@introduced] = (let temp___294 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
      ( [#"nucleartrain.adb" 62 0 0] begin ensures {true} let _ = (let _ = temp___294.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
       ()))
       in () end ;
      { ( temp___294 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___294.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___293 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
       ( [#"nucleartrain.adb" 62 0 0] begin ensures {true} let _ = (let _ = temp___293.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
        ()))
        in () end ;
       { ( temp___293 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___293.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature = (Nucleartrain__reactortemperature__rep.of_rep(([#"nucleartrain.adb" 62 0 0] ( [@GP_Shape:if__train_assign__add] [@GP_Id:16] [@vc:annotation] [@comment:          train.engineReactor.temperature := train.engineReactor.temperature + 5;                                                                              ^ nucleartrain.adb:62:78:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:62:78] (Nucleartrain__reactortemperature.range_check_(((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) + (5 : int)))) )))) } } )))
       } } )))
      in (
       (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___295.Nucleartrain__trainspecs.__split_fields ))))
     ) ) )) else (
     ( [@GP_Sloc:nucleartrain.adb:63:7] (if (( ([#"nucleartrain.adb" 63 0 0] [#"nucleartrain.adb" 63 0 0] (([@branch_id=2643] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (2 : int)) )));
     ( [@branch_id=2643] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:nucleartrain.adb:64:12] ([#"nucleartrain.adb" 64 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:64:30] ([#"nucleartrain.adb" 64 0 0] (let temp___312 [@mlw:proxy_symbol] [@introduced] = (let temp___311 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
       ( [#"nucleartrain.adb" 64 0 0] begin ensures {true} let _ = (let _ = temp___311.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity in (
        ()))
        in () end ;
       { ( temp___311 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___311.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity = ( 79 : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated ) } } )))
       in (
       [#"nucleartrain.adb" 64 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___312.Nucleartrain__trainspecs.__split_fields ))))
      ) );
      ( [@GP_Sloc:nucleartrain.adb:65:12] ([#"nucleartrain.adb" 65 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:65:47] ([#"nucleartrain.adb" 65 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:65:44] ([#"nucleartrain.adb" 65 0 0] (let temp___315 [@mlw:proxy_symbol] [@introduced] = (let temp___314 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
       ( [#"nucleartrain.adb" 65 0 0] begin ensures {true} let _ = (let _ = temp___314.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
        ()))
        in () end ;
       { ( temp___314 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___314.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___313 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
        ( [#"nucleartrain.adb" 65 0 0] begin ensures {true} let _ = (let _ = temp___313.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
         ()))
         in () end ;
        { ( temp___313 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___313.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature = (Nucleartrain__reactortemperature__rep.of_rep(([#"nucleartrain.adb" 65 0 0] ( [@GP_Shape:if__train_assign__add] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:20] [@GP_Sloc:nucleartrain.adb:65:79] [@comment:           train.engineReactor.temperature := train.engineReactor.temperature + 4;                                                                               ^ nucleartrain.adb:65:79:VC_RANGE_CHECK] (Nucleartrain__reactortemperature.range_check_(((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) + (4 : int)))) )))) } } )))
        } } )))
       in (
        (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___315.Nucleartrain__trainspecs.__split_fields ))))
      ) ) )) else (
      ( [@GP_Sloc:nucleartrain.adb:66:7] (if (( ([#"nucleartrain.adb" 66 0 0] [#"nucleartrain.adb" 66 0 0] (([@branch_id=2675] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (3 : int)) )));
      ( [@branch_id=2675] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:nucleartrain.adb:67:13] ([#"nucleartrain.adb" 67 0 0] ()) );
       ( [@GP_Sloc:nucleartrain.adb:67:31] ([#"nucleartrain.adb" 67 0 0] (let temp___307 [@mlw:proxy_symbol] [@introduced] = (let temp___306 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
        ( [#"nucleartrain.adb" 67 0 0] begin ensures {true} let _ = (let _ = temp___306.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity in (
         ()))
         in () end ;
        { ( temp___306 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___306.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity = ( 59 : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated ) } } )))
        in (
        [#"nucleartrain.adb" 67 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___307.Nucleartrain__trainspecs.__split_fields ))))
       ) );
       ( [@GP_Sloc:nucleartrain.adb:68:13] ([#"nucleartrain.adb" 68 0 0] ()) );
       ( [@GP_Sloc:nucleartrain.adb:68:48] ([#"nucleartrain.adb" 68 0 0] ()) );
       ( [@GP_Sloc:nucleartrain.adb:68:45] ([#"nucleartrain.adb" 68 0 0] (let temp___310 [@mlw:proxy_symbol] [@introduced] = (let temp___309 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
        ( [#"nucleartrain.adb" 68 0 0] begin ensures {true} let _ = (let _ = temp___309.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
         ()))
         in () end ;
        { ( temp___309 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___309.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___308 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
         ( [#"nucleartrain.adb" 68 0 0] begin ensures {true} let _ = (let _ = temp___308.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
          ()))
          in () end ;
         { ( temp___308 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___308.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature = (Nucleartrain__reactortemperature__rep.of_rep(([#"nucleartrain.adb" 68 0 0] ( [@GP_Shape:if__train_assign__add] [@GP_Id:19] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:            train.engineReactor.temperature := train.engineReactor.temperature + 3;                                                                                ^ nucleartrain.adb:68:80:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:68:80] (Nucleartrain__reactortemperature.range_check_(((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) + (3 : int)))) )))) } } )))
         } } )))
        in (
         (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___310.Nucleartrain__trainspecs.__split_fields ))))
       ) ) )) else (
       ( [@GP_Sloc:nucleartrain.adb:69:7] (if (( ([#"nucleartrain.adb" 69 0 0] [#"nucleartrain.adb" 69 0 0] (([@branch_id=2707] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (4 : int)) )));
       ( [@branch_id=2707] Main.spark__branch ).bool__content )) then (
        ( ();
        ( [@GP_Sloc:nucleartrain.adb:70:13] ([#"nucleartrain.adb" 70 0 0] ()) );
        ( [@GP_Sloc:nucleartrain.adb:70:31] ([#"nucleartrain.adb" 70 0 0] (let temp___302 [@mlw:proxy_symbol] [@introduced] = (let temp___301 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
         ( [#"nucleartrain.adb" 70 0 0] begin ensures {true} let _ = (let _ = temp___301.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity in (
          ()))
          in () end ;
         { ( temp___301 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___301.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity = ( 39 : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated ) } } )))
         in (
         [#"nucleartrain.adb" 70 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___302.Nucleartrain__trainspecs.__split_fields ))))
        ) );
        ( [@GP_Sloc:nucleartrain.adb:71:13] ([#"nucleartrain.adb" 71 0 0] ()) );
        ( [@GP_Sloc:nucleartrain.adb:71:48] ([#"nucleartrain.adb" 71 0 0] ()) );
        ( [@GP_Sloc:nucleartrain.adb:71:45] ([#"nucleartrain.adb" 71 0 0] (let temp___305 [@mlw:proxy_symbol] [@introduced] = (let temp___304 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
         ( [#"nucleartrain.adb" 71 0 0] begin ensures {true} let _ = (let _ = temp___304.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
          ()))
          in () end ;
         { ( temp___304 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___304.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___303 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
          ( [#"nucleartrain.adb" 71 0 0] begin ensures {true} let _ = (let _ = temp___303.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
           ()))
           in () end ;
          { ( temp___303 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___303.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature = (Nucleartrain__reactortemperature__rep.of_rep(([#"nucleartrain.adb" 71 0 0] ( [@GP_Shape:if__train_assign__add] [@GP_Id:18] [@comment:            train.engineReactor.temperature := train.engineReactor.temperature + 2;                                                                                ^ nucleartrain.adb:71:80:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:71:80] (Nucleartrain__reactortemperature.range_check_(((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) + (2 : int)))) )))) } } )))
          } } )))
         in (
          (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___305.Nucleartrain__trainspecs.__split_fields ))))
        ) ) )) else (
        ( [@GP_Sloc:nucleartrain.adb:72:7] (if (( ([#"nucleartrain.adb" 72 0 0] [#"nucleartrain.adb" 72 0 0] (([@branch_id=2739] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactorcontrolrod__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__rods)) = (5 : int)) )));
        ( [@branch_id=2739] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:nucleartrain.adb:73:13] ([#"nucleartrain.adb" 73 0 0] ()) );
         ( [@GP_Sloc:nucleartrain.adb:73:31] ([#"nucleartrain.adb" 73 0 0] (let temp___297 [@mlw:proxy_symbol] [@introduced] = (let temp___296 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
          ( [#"nucleartrain.adb" 73 0 0] begin ensures {true} let _ = (let _ = temp___296.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity in (
           ()))
           in () end ;
          { ( temp___296 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___296.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity = ( 19 : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated ) } } )))
          in (
          [#"nucleartrain.adb" 73 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___297.Nucleartrain__trainspecs.__split_fields ))))
         ) );
         ( [@GP_Sloc:nucleartrain.adb:74:13] ([#"nucleartrain.adb" 74 0 0] ()) );
         ( [@GP_Sloc:nucleartrain.adb:74:48] ([#"nucleartrain.adb" 74 0 0] ()) );
         ( [@GP_Sloc:nucleartrain.adb:74:45] ([#"nucleartrain.adb" 74 0 0] (let temp___300 [@mlw:proxy_symbol] [@introduced] = (let temp___299 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
          ( [#"nucleartrain.adb" 74 0 0] begin ensures {true} let _ = (let _ = temp___299.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
           ()))
           in () end ;
          { ( temp___299 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___299.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___298 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
           ( [#"nucleartrain.adb" 74 0 0] begin ensures {true} let _ = (let _ = temp___298.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
            ()))
            in () end ;
           { ( temp___298 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___298.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature = (Nucleartrain__reactortemperature__rep.of_rep(([#"nucleartrain.adb" 74 0 0] ( [@GP_Sloc:nucleartrain.adb:74:80] [@GP_Shape:if__train_assign__add] [@GP_Id:17] [@comment:            train.engineReactor.temperature := train.engineReactor.temperature + 1;                                                                                ^ nucleartrain.adb:74:80:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] (Nucleartrain__reactortemperature.range_check_(((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) + (1 : int)))) )))) } } )))
           } } )))
          in (
           (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___300.Nucleartrain__trainspecs.__split_fields ))))
         ) ) )) else (
         ())) ))) ))) ))) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ( ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) > temp___old_316) && ((Nucleartrain__reactorelectricitygenerated__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity)) <> (0 : int)) ) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "starttrain" defined at nucleartrain.ads:94, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__starttrain__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom

 let def [#"nucleartrain.ads" 94 0 0][@GP_Subp:nucleartrain.ads:94] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 94 0 0] true }
  ensures { [#"nucleartrain.ads" 94 0 0] ([#"nucleartrain.ads" 99 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:nucleartrain.ads:99:14] [@GP_Shape:pragargs__cmp] [@comment:     Post => train.travelSpeed > 0;              ^ nucleartrain.ads:99:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:22] ( [@GP_Sloc:nucleartrain.ads:99:14] [@GP_Pretty_Ada:20047] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) > (0 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:94 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:94 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:94 *)
  ;
   begin ensures {true} let _ = (let _ = ( ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) && (Nucleartrain__invariant___axiom.invariant__(())) ) && ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:94 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3841] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3842] ((epsilon temp___result_320 : bool.
   ( (temp___result_320 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_320 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:3851] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:nucleartrain.adb:80:11] ([#"nucleartrain.adb" 80 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:80:7] ([#"nucleartrain.adb" 80 0 0] (if (( ([#"nucleartrain.adb" 80 0 0] [#"nucleartrain.adb" 80 0 0] (([@branch_id=2783] Main.spark__branch).bool__content <- ( ( (Nucleartrain__invariant___axiom.invariant__(())) && ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) ) )));
   ( [@branch_id=2783] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:81:10] ([#"nucleartrain.adb" 81 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:81:28] ([#"nucleartrain.adb" 81 0 0] (let temp___319 [@mlw:proxy_symbol] [@introduced] = (let temp___318 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
     ( [#"nucleartrain.adb" 81 0 0] begin ensures {true} let _ = (let _ = temp___318.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed in (
      ()))
      in () end ;
     { ( temp___318 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___318.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed = ( 1 : Standard__integer.integer ) } } )))
     in (
     [#"nucleartrain.adb" 81 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___319.Nucleartrain__trainspecs.__split_fields ))))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) > (0 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "stoptrain" defined at nucleartrain.ads:101, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__stoptrain__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated
 use        Nucleartrain__reactorelectricitygenerated__rep as Nucleartrain__reactorelectricitygenerated__rep
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Temp___String_Literal_330 as Temp___String_Literal_330
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 101 0 0][@GP_Subp:nucleartrain.ads:101] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 101 0 0] true }
  ensures { [#"nucleartrain.ads" 101 0 0] ([#"nucleartrain.ads" 104 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => train.travelSpeed = 0              ^ nucleartrain.ads:104:14:VC_POSTCONDITION] [@GP_Sloc:nucleartrain.ads:104:14] [@GP_Shape:pragargs__andthen] [@model_vc_post] [@GP_Id:23] ( ( ( ( [@GP_Sloc:nucleartrain.ads:104:14] [@GP_Pretty_Ada:3903] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:3909] [@GP_Sloc:nucleartrain.ads:105:15] ((Nucleartrain__reactorelectricitygenerated__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity) = (0 : int)) ) ) /\ ( [@GP_Sloc:nucleartrain.ads:106:15] [@GP_Pretty_Ada:3917] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:3925] [@GP_Sloc:nucleartrain.ads:107:15] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed) = (0 : int)) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:101 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:101 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:101 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.orb(((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) >= (0 : int))) (((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) <= (0 : int)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:101 *)
  ;
   assume {  ( [@GP_Pretty_Ada:20095] ( ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) >= (0 : int)) \/ ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) <= (0 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:nucleartrain.adb:87:7] ([#"nucleartrain.adb" 87 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:87:25] ([#"nucleartrain.adb" 87 0 0] (let temp___322 [@mlw:proxy_symbol] [@introduced] = (let temp___321 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
    ( [#"nucleartrain.adb" 87 0 0] begin ensures {true} let _ = (let _ = temp___321.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed in (
     ()))
     in () end ;
    { ( temp___321 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___321.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed = ( 0 : Standard__integer.integer ) } } )))
    in (
    [#"nucleartrain.adb" 87 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___322.Nucleartrain__trainspecs.__split_fields ))))
   ) );
   ( [@GP_Sloc:nucleartrain.adb:88:7] ([#"nucleartrain.adb" 88 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:88:25] ([#"nucleartrain.adb" 88 0 0] (let temp___324 [@mlw:proxy_symbol] [@introduced] = (let temp___323 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
    ( [#"nucleartrain.adb" 88 0 0] begin ensures {true} let _ = (let _ = temp___323.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity in (
     ()))
     in () end ;
    { ( temp___323 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___323.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity = ( 0 : Nucleartrain__reactorelectricitygenerated.reactorelectricitygenerated ) } } )))
    in (
    [#"nucleartrain.adb" 88 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___324.Nucleartrain__trainspecs.__split_fields ))))
   ) );
   ( [@GP_Sloc:nucleartrain.adb:89:7] ([#"nucleartrain.adb" 89 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:89:28] ([#"nucleartrain.adb" 89 0 0] (let temp___326 [@mlw:proxy_symbol] [@introduced] = (let temp___325 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
    ( [#"nucleartrain.adb" 89 0 0] begin ensures {true} let _ = (let _ = temp___325.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed in (
     ()))
     in () end ;
    { ( temp___325 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___325.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed = ( 0 : Standard__integer.integer ) } } )))
    in (
    [#"nucleartrain.adb" 89 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___326.Nucleartrain__trainspecs.__split_fields ))))
   ) );
   ( [@GP_Sloc:nucleartrain.adb:90:7] ([#"nucleartrain.adb" 90 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:90:39] ([#"nucleartrain.adb" 90 0 0] (let temp___329 [@mlw:proxy_symbol] [@introduced] = (let temp___328 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
    ( [#"nucleartrain.adb" 90 0 0] begin ensures {true} let _ = (let _ = temp___328.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
     ()))
     in () end ;
    { ( temp___328 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___328.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___327 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
     ( [#"nucleartrain.adb" 90 0 0] begin ensures {true} let _ = (let _ = temp___327.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
      ()))
      in () end ;
     { ( temp___327 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___327.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature = ( 0 : Nucleartrain__reactortemperature.reactortemperature ) } } )))
     } } )))
    in (
    [#"nucleartrain.adb" 90 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___329.Nucleartrain__trainspecs.__split_fields ))))
   ) );
   ( [@GP_Sloc:nucleartrain.adb:91:7] ([#"nucleartrain.adb" 91 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:91:7] ([#"nucleartrain.adb" 91 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_330.temp___String_Literal_330(()))) ((1 : int)) ((23 : int))))) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ( ( ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) && ((Nucleartrain__reactorelectricitygenerated__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity)) = (0 : int)) ) && ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) = (0 : int)) ) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed)) = (0 : int)) ) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "settrainmaximumspeed" defined at nucleartrain.ads:109, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__settrainmaximumspeed__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__string as Standard__string
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__stoptrain___axiom as Nucleartrain__stoptrain___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorelectricitygenerated as Nucleartrain__reactorelectricitygenerated
 use        Nucleartrain__reactorelectricitygenerated__rep as Nucleartrain__reactorelectricitygenerated__rep
 use        Nucleartrain__passengerscarriages as Nucleartrain__passengerscarriages
 use        Nucleartrain__passengerscarriages__rep as Nucleartrain__passengerscarriages__rep
 use        Temp___String_Literal_333 as Temp___String_Literal_333
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_334 as Temp___String_Literal_334
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Nucleartrain__stoptrain___axiom as Nucleartrain__stoptrain___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 109 0 0][@GP_Subp:nucleartrain.ads:109] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 109 0 0] true }
  ensures { [#"nucleartrain.ads" 109 0 0] ([#"nucleartrain.ads" 112 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => train.travelSpeed >= 0;              ^ nucleartrain.ads:112:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:nucleartrain.ads:112:14] [@GP_Id:27] ( [@GP_Pretty_Ada:20182] [@GP_Sloc:nucleartrain.ads:112:14] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) >= (0 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:109 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:109 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:109 *)
  ;
   begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) >= (0 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:109 *)
  ;
   assume {  ( [@GP_Pretty_Ada:20170] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) >= (0 : int)) ) };
   try
   ( ();
   ( [@GP_Sloc:nucleartrain.adb:96:7] ([#"nucleartrain.adb" 96 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:96:39] ([#"nucleartrain.adb" 96 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:96:72] ([#"nucleartrain.adb" 96 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:96:28] ([#"nucleartrain.adb" 96 0 0] (let temp___332 [@mlw:proxy_symbol] [@introduced] = (let temp___331 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
    ( [#"nucleartrain.adb" 96 0 0] begin ensures {true} let _ = (let _ = temp___331.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed in (
     ()))
     in () end ;
    { ( temp___331 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___331.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed = (Standard__integer__rep.of_rep(([#"nucleartrain.adb" 96 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:      train.maxTravelSpeed := Integer(train.electricity) - (5* Integer(train.carriages));                                                          ^ nucleartrain.adb:96:58:VC_OVERFLOW_CHECK] [@GP_Shape:train_assign__sub] [@GP_Id:25] [@GP_Sloc:nucleartrain.adb:96:58] (Standard__integer.range_check_(((Nucleartrain__reactorelectricitygenerated__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__electricity)) - ([#"nucleartrain.adb" 96 0 0] ( [@GP_Shape:train_assign__sub__mult] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:nucleartrain.adb:96:62] [@comment:      train.maxTravelSpeed := Integer(train.electricity) - (5* Integer(train.carriages));                                                              ^ nucleartrain.adb:96:62:VC_OVERFLOW_CHECK] [@GP_Id:24] (Standard__integer.range_check_(((5 : int) * (Nucleartrain__passengerscarriages__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__carriages))))) ))))) )))) } } )))
    in (
     (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___332.Nucleartrain__trainspecs.__split_fields ))))
   ) );
   ( [@GP_Sloc:nucleartrain.adb:97:10] ([#"nucleartrain.adb" 97 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:97:7] ([#"nucleartrain.adb" 97 0 0] (if (( ([#"nucleartrain.adb" 97 0 0] [#"nucleartrain.adb" 97 0 0] (([@branch_id=2866] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed)) <= (0 : int)) )));
   ( [@branch_id=2866] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:98:10] ([#"nucleartrain.adb" 98 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:98:10] ([#"nucleartrain.adb" 98 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_333.temp___String_Literal_333(()))) ((1 : int)) ((0 : int))))) )) );
    ( [@GP_Sloc:nucleartrain.adb:99:10] ([#"nucleartrain.adb" 99 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:99:10] ([#"nucleartrain.adb" 99 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_334.temp___String_Literal_334(()))) ((1 : int)) ((68 : int))))) )) );
    ( [@GP_Sloc:nucleartrain.adb:100:10] ([#"nucleartrain.adb" 100 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:100:10] ([#"nucleartrain.adb" 100 0 0] ( ([#"nucleartrain.adb" 100 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:         stopTrain;          ^ nucleartrain.adb:100:10:VC_PRECONDITION] [@GP_Shape:if__call_stoptrain] [@GP_Sloc:nucleartrain.adb:100:10] [@GP_Id:26] (Nucleartrain__stoptrain___axiom.stoptrain(())) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) >= (0 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "trainacceleration" defined at nucleartrain.ads:114, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__trainacceleration__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Temp___String_Literal_337 as Temp___String_Literal_337
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 114 0 0][@GP_Subp:nucleartrain.ads:114] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 114 0 0] true }
  ensures { [#"nucleartrain.ads" 114 0 0] ([#"nucleartrain.ads" 120 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:nucleartrain.ads:120:14] [@GP_Shape:pragargs__cmp] [@GP_Id:30] [@model_vc_post] [@comment:     Post => train.travelSpeed = train.travelSpeed'Old + 1;              ^ nucleartrain.ads:120:14:VC_POSTCONDITION] ( [@GP_Sloc:nucleartrain.ads:120:14] [@GP_Pretty_Ada:20259] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = ((Standard__integer__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed )) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:114 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:114 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:114 *)
  ;
   begin ensures {true} let _ = (let _ = ( ( ( (Nucleartrain__invariant___axiom.invariant__(())) && ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) ) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) < (100 : int)) ) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) < (Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed))) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:114 *)
  ;
   assume {  ( ( ( ( [@GP_Pretty_Ada:3988] ((epsilon temp___result_339 : bool.
   ( (temp___result_339 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_339 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) /\ ( [@GP_Pretty_Ada:3996] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:4002] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) < (100 : int)) ) ) /\ ( [@GP_Pretty_Ada:4008] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) < (Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed)) ) ) };
   begin ensures {true} let _ = (let _ = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed in (
   ()))
   in () end ;
  (let temp___old_338 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed))} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:106:11] ([#"nucleartrain.adb" 106 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:106:7] ([#"nucleartrain.adb" 106 0 0] (if (( ([#"nucleartrain.adb" 106 0 0] [#"nucleartrain.adb" 106 0 0] (([@branch_id=2892] Main.spark__branch).bool__content <- ( ( ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) < (100 : int)) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) < (Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__maxtravelspeed))) ) && ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) ) )));
    ( [@branch_id=2892] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:nucleartrain.adb:109:10] ([#"nucleartrain.adb" 109 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:109:31] ([#"nucleartrain.adb" 109 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:109:28] ([#"nucleartrain.adb" 109 0 0] (let temp___336 [@mlw:proxy_symbol] [@introduced] = (let temp___335 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
      ( [#"nucleartrain.adb" 109 0 0] begin ensures {true} let _ = (let _ = temp___335.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed in (
       ()))
       in () end ;
      { ( temp___335 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___335.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed = (Standard__integer__rep.of_rep(([#"nucleartrain.adb" 109 0 0] ( [@GP_Shape:if__train_assign__add] [@vc:annotation] [@comment:         train.travelSpeed := train.travelSpeed + 1;                                                 ^ nucleartrain.adb:109:49:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:nucleartrain.adb:109:49] [@GP_Id:28] (Standard__integer.range_check_(((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) + (1 : int)))) )))) } } )))
      in (
       (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___336.Nucleartrain__trainspecs.__split_fields ))))
     ) ) )) else (
     ( ();
     ( [@GP_Sloc:nucleartrain.adb:111:10] ([#"nucleartrain.adb" 111 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:111:10] ([#"nucleartrain.adb" 111 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_337.temp___String_Literal_337(()))) ((1 : int)) ((37 : int))))) )) ) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = ([#"nucleartrain.ads" 120 0 0] ( [@comment:     Post => train.travelSpeed = train.travelSpeed'Old + 1;                                                        ^ nucleartrain.ads:120:56:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__cmp__add] [@GP_Id:29] [@GP_Sloc:nucleartrain.ads:120:56] (Standard__integer.range_check_((temp___old_338 + (1 : int)))) ))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "warnreactoroverheat" defined at nucleartrain.ads:122, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__warnreactoroverheat__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Nucleartrain__reactoroverheated as Nucleartrain__reactoroverheated
 use        Nucleartrain__reactoroverheated__rep as Nucleartrain__reactoroverheated__rep
 use        Nucleartrain__reactorstate as Nucleartrain__reactorstate
 use        Nucleartrain__reactorstate__rep as Nucleartrain__reactorstate__rep
 use        Temp___String_Literal_343 as Temp___String_Literal_343
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 122 0 0][@GP_Subp:nucleartrain.ads:122] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 122 0 0] true }
  ensures { [#"nucleartrain.ads" 122 0 0] ([#"nucleartrain.ads" 128 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:nucleartrain.ads:128:14] [@comment:     Post => train.engineReactor.heat = Yes;              ^ nucleartrain.ads:128:14:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Id:32] [@model_vc_post] ( [@GP_Sloc:nucleartrain.ads:128:14] [@GP_Pretty_Ada:20335] ((Nucleartrain__reactoroverheated__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat) = (1 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:122 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:122 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:122 *)
  ;
   begin ensures {true} let _ = (let _ = ( ( ( (Nucleartrain__invariant___axiom.invariant__(())) && ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) >= (200 : int)) ) && ((Nucleartrain__reactorstate__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state)) = (0 : int)) ) && ((Nucleartrain__reactoroverheated__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat)) = (0 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:122 *)
  ;
   assume {  ( ( ( ( [@GP_Pretty_Ada:4050] ((epsilon temp___result_346 : bool.
   ( (temp___result_346 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_346 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) /\ ( [@GP_Pretty_Ada:4058] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) >= (200 : int)) ) ) /\ ( [@GP_Pretty_Ada:4066] ((Nucleartrain__reactorstate__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__state) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:4074] ((Nucleartrain__reactoroverheated__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat) = (0 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:nucleartrain.adb:117:11] ([#"nucleartrain.adb" 117 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:117:7] ([#"nucleartrain.adb" 117 0 0] (if (( ([#"nucleartrain.adb" 117 0 0] [#"nucleartrain.adb" 117 0 0] (([@branch_id=2939] Main.spark__branch).bool__content <- ( ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) >= (200 : int)) )));
   ( [@branch_id=2939] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:118:10] ([#"nucleartrain.adb" 118 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:118:35] ([#"nucleartrain.adb" 118 0 0] (let temp___342 [@mlw:proxy_symbol] [@introduced] = (let temp___341 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
     ( [#"nucleartrain.adb" 118 0 0] begin ensures {true} let _ = (let _ = temp___341.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
      ()))
      in () end ;
     { ( temp___341 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___341.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___340 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
      ( [#"nucleartrain.adb" 118 0 0] begin ensures {true} let _ = (let _ = temp___340.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat in (
       ()))
       in () end ;
      { ( temp___340 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___340.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat = (Nucleartrain__reactoroverheated__rep.of_rep((1 : int))) } } )))
      } } )))
     in (
     [#"nucleartrain.adb" 118 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___342.Nucleartrain__trainspecs.__split_fields ))))
    ) );
    ( [@GP_Sloc:nucleartrain.adb:119:10] ([#"nucleartrain.adb" 119 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:119:10] ([#"nucleartrain.adb" 119 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___345 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__reactoroverheated.attr__ATTRIBUTE_IMAGE((Nucleartrain__reactoroverheated__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat))))) ((2040 : int))) in (
    (let temp___344 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_343.temp___String_Literal_343(())) in (
     (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___344) ((1 : int)) ((93 : int)) ((Standard__string.to_array(temp___345))) ((Standard__string.first(temp___345))) ((Standard__string.last(temp___345))))) ((1 : int)) (([#"nucleartrain.adb" 119 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@vc:annotation] [@GP_Id:31] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:119:115] [@comment:         Put_Line("!!Reactor is now OVERHEATED. Please stop the train or use water supply!!!REACTOR OVERHEATED: " &train.engineReactor.heat'Image);                                                                                                                   ^ nucleartrain.adb:119:115:VC_RANGE_CHECK] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((93 : int))) + (Integer.length((Standard__string.first(temp___345))) ((Standard__string.last(temp___345)))))) - (1 : int)))) ))))))
    ))
    )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Nucleartrain__reactoroverheated__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__heat)) = (1 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "watercooldownreactor" defined at nucleartrain.ads:130, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__watercooldownreactor__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__invariant as Nucleartrain__invariant
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Nucleartrain__stoptrain___axiom as Nucleartrain__stoptrain___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorwatersupply as Nucleartrain__reactorwatersupply
 use        Nucleartrain__reactorwatersupply__rep as Nucleartrain__reactorwatersupply__rep
 use        Nucleartrain__reactortemperature as Nucleartrain__reactortemperature
 use        Nucleartrain__reactortemperature__rep as Nucleartrain__reactortemperature__rep
 use        Temp___String_Literal_353 as Temp___String_Literal_353
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_354 as Temp___String_Literal_354
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_357 as Temp___String_Literal_357
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Nucleartrain__invariant___axiom as Nucleartrain__invariant___axiom
 use        Nucleartrain__stoptrain___axiom as Nucleartrain__stoptrain___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 130 0 0][@GP_Subp:nucleartrain.ads:130] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 130 0 0] true }
  ensures { [#"nucleartrain.ads" 130 0 0] ([#"nucleartrain.ads" 136 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => train.engineReactor.temperature = train.engineReactor.temperature'Old - 50              ^ nucleartrain.ads:136:14:VC_POSTCONDITION] [@GP_Sloc:nucleartrain.ads:136:14] [@GP_Id:37] [@GP_Shape:pragargs__andthen] [@model_vc_post] ( ( [@GP_Sloc:nucleartrain.ads:136:14] [@GP_Pretty_Ada:4142] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) = ((Nucleartrain__reactortemperature__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature )) - (50 : int))) ) /\ ( [@GP_Pretty_Ada:4158] [@GP_Sloc:nucleartrain.ads:137:15] ((Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water) = ((Nucleartrain__reactorwatersupply__rep.to_rep (old { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water )) - (2 : int))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:130 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:130 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:130 *)
  ;
   begin ensures {true} let _ = (let _ = ( ( ( (Nucleartrain__invariant___axiom.invariant__(())) && ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) > (0 : int)) ) && ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) >= (200 : int)) ) && ((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water)) >= (2 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:130 *)
  ;
   assume {  ( ( ( ( [@GP_Pretty_Ada:4110] ((epsilon temp___result_360 : bool.
   ( (temp___result_360 = (Nucleartrain__invariant.invariant__ Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content)) /\ (Nucleartrain__invariant.invariant____function_guard temp___result_360 Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content) )) = True) ) /\ ( [@GP_Pretty_Ada:4116] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:4124] ((Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature) >= (200 : int)) ) ) /\ ( [@GP_Pretty_Ada:4132] ((Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water) >= (2 : int)) ) ) };
   begin ensures {true} let _ = (let _ = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water in (
   ()))
   in () end ;
  (let temp___old_359 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = (Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water))} 
  in _f) in (
   (  begin ensures {true} let _ = (let _ = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
    ()))
    in () end ;
   (let temp___old_358 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
   ensures { (result = (Nucleartrain__reactortemperature__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature))} 
   in _f) in (
    (  try
     ( ();
     ( [@GP_Sloc:nucleartrain.adb:125:11] ([#"nucleartrain.adb" 125 0 0] ()) );
     ( [@GP_Sloc:nucleartrain.adb:125:7] ([#"nucleartrain.adb" 125 0 0] (if (( ([#"nucleartrain.adb" 125 0 0] [#"nucleartrain.adb" 125 0 0] (([@branch_id=2977] Main.spark__branch).bool__content <- ( ( ((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water)) > (1 : int)) && ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) >= (200 : int)) ) )));
     ( [@branch_id=2977] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:nucleartrain.adb:126:10] ([#"nucleartrain.adb" 126 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:126:39] ([#"nucleartrain.adb" 126 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:126:36] ([#"nucleartrain.adb" 126 0 0] (let temp___349 [@mlw:proxy_symbol] [@introduced] = (let temp___348 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
       ( [#"nucleartrain.adb" 126 0 0] begin ensures {true} let _ = (let _ = temp___348.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
        ()))
        in () end ;
       { ( temp___348 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___348.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___347 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
        ( [#"nucleartrain.adb" 126 0 0] begin ensures {true} let _ = (let _ = temp___347.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water in (
         ()))
         in () end ;
        { ( temp___347 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___347.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water = (Nucleartrain__reactorwatersupply__rep.of_rep(([#"nucleartrain.adb" 126 0 0] ( [@GP_Sloc:nucleartrain.adb:126:65] [@vc:annotation] [@GP_Shape:if__train_assign__sub] [@GP_Id:33] [@GP_Reason:VC_RANGE_CHECK] [@comment:         train.engineReactor.water := train.engineReactor.water - 2;                                                                 ^ nucleartrain.adb:126:65:VC_RANGE_CHECK] (Nucleartrain__reactorwatersupply.range_check_(((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water)) - (2 : int)))) )))) } } )))
        } } )))
       in (
        (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___349.Nucleartrain__trainspecs.__split_fields ))))
      ) );
      ( [@GP_Sloc:nucleartrain.adb:127:10] ([#"nucleartrain.adb" 127 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:127:45] ([#"nucleartrain.adb" 127 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:127:42] ([#"nucleartrain.adb" 127 0 0] (let temp___352 [@mlw:proxy_symbol] [@introduced] = (let temp___351 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
       ( [#"nucleartrain.adb" 127 0 0] begin ensures {true} let _ = (let _ = temp___351.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
        ()))
        in () end ;
       { ( temp___351 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___351.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___350 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
        ( [#"nucleartrain.adb" 127 0 0] begin ensures {true} let _ = (let _ = temp___350.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature in (
         ()))
         in () end ;
        { ( temp___350 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___350.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature = (Nucleartrain__reactortemperature__rep.of_rep(([#"nucleartrain.adb" 127 0 0] ( [@comment:         train.engineReactor.temperature := train.engineReactor.temperature - 50;                                                                             ^ nucleartrain.adb:127:77:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:127:77] [@vc:annotation] [@GP_Shape:if__train_assign__sub] [@GP_Id:34] [@GP_Reason:VC_RANGE_CHECK] (Nucleartrain__reactortemperature.range_check_(((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) - (50 : int)))) )))) } } )))
        } } )))
       in (
        (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___352.Nucleartrain__trainspecs.__split_fields ))))
      ) );
      ( [@GP_Sloc:nucleartrain.adb:128:10] ([#"nucleartrain.adb" 128 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:128:10] ([#"nucleartrain.adb" 128 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_353.temp___String_Literal_353(()))) ((1 : int)) ((1 : int))))) )) );
      ( [@GP_Sloc:nucleartrain.adb:129:10] ([#"nucleartrain.adb" 129 0 0] ()) );
      ( [@GP_Sloc:nucleartrain.adb:129:10] ([#"nucleartrain.adb" 129 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___356 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__reactorwatersupply.attr__ATTRIBUTE_IMAGE((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water))))) ((5 : int))) in (
      (let temp___355 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_354.temp___String_Literal_354(())) in (
       (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___355) ((1 : int)) ((56 : int)) ((Standard__string.to_array(temp___356))) ((Standard__string.first(temp___356))) ((Standard__string.last(temp___356))))) ((1 : int)) (([#"nucleartrain.adb" 129 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@comment:         Put_Line("Using water supply for cooldown. Water supply remaining:"& train.engineReactor.water'Image);                                                                             ^ nucleartrain.adb:129:77:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:35] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:nucleartrain.adb:129:77] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((56 : int))) + (Integer.length((Standard__string.first(temp___356))) ((Standard__string.last(temp___356)))))) - (1 : int)))) ))))))
      ))
      )) )) ) )) else (
      ( [@GP_Sloc:nucleartrain.adb:130:7] (if (( ([#"nucleartrain.adb" 130 0 0] [#"nucleartrain.adb" 130 0 0] (([@branch_id=3037] Main.spark__branch).bool__content <- ( ( ((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water)) = (0 : int)) && ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) >= (200 : int)) ) )));
      ( [@branch_id=3037] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:nucleartrain.adb:131:10] ([#"nucleartrain.adb" 131 0 0] ()) );
       ( [@GP_Sloc:nucleartrain.adb:131:10] ([#"nucleartrain.adb" 131 0 0] ( ([#"nucleartrain.adb" 131 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:         stopTrain;          ^ nucleartrain.adb:131:10:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:nucleartrain.adb:131:10] [@GP_Id:36] [@GP_Shape:if__call_stoptrain] (Nucleartrain__stoptrain___axiom.stoptrain(())) )) )) );
       ( [@GP_Sloc:nucleartrain.adb:132:10] ([#"nucleartrain.adb" 132 0 0] ()) );
       ( [@GP_Sloc:nucleartrain.adb:132:10] ([#"nucleartrain.adb" 132 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_357.temp___String_Literal_357(()))) ((1 : int)) ((90 : int))))) )) ) )) else (
       ())) )))) );
      raise Return__exc )
    with
     Return__exc -> ()
    end;
     begin ensures {true} let _ = (let _ = ( ((Nucleartrain__reactortemperature__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__temperature)) = (temp___old_358 - (50 : int))) && ((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water)) = (temp___old_359 - (2 : int))) ) in (
     ()))
     in () end  )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "refillwatersupply" defined at nucleartrain.ads:139, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Nucleartrain__refillwatersupply__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard_String__Img as Standard_String__Img
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Nucleartrain__reactorspecs as Nucleartrain__reactorspecs
 use        Nucleartrain__train as Nucleartrain__train
 use        Nucleartrain__trainspecs as Nucleartrain__trainspecs
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Nucleartrain__reactorwatersupply as Nucleartrain__reactorwatersupply
 use        Nucleartrain__reactorwatersupply__rep as Nucleartrain__reactorwatersupply__rep
 use        Temp___String_Literal_364 as Temp___String_Literal_364
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Nucleartrain__reactorcontrolrod___axiom as Nucleartrain__reactorcontrolrod___axiom
 use        Nucleartrain__reactorwatersupply___axiom as Nucleartrain__reactorwatersupply___axiom
 use        Nucleartrain__reactorelectricitygenerated___axiom as Nucleartrain__reactorelectricitygenerated___axiom
 use        Nucleartrain__reactortemperature___axiom as Nucleartrain__reactortemperature___axiom
 use        Nucleartrain__reactoroverheated___axiom as Nucleartrain__reactoroverheated___axiom
 use        Nucleartrain__reactorstate___axiom as Nucleartrain__reactorstate___axiom
 use        Nucleartrain__passengerscarriages___axiom as Nucleartrain__passengerscarriages___axiom
 use        Nucleartrain__reactorspecs___axiom as Nucleartrain__reactorspecs___axiom
 use        Nucleartrain__trainspecs___axiom as Nucleartrain__trainspecs___axiom
 use        Nucleartrain__train___axiom as Nucleartrain__train___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom

 let def [#"nucleartrain.ads" 139 0 0][@GP_Subp:nucleartrain.ads:139] 
   (__void_param : unit)
  requires { [#"nucleartrain.ads" 139 0 0] true }
  ensures { [#"nucleartrain.ads" 139 0 0] ([#"nucleartrain.ads" 143 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:nucleartrain.ads:143:14] [@comment:     Post => train.engineReactor.water = ReactorWaterSupply'Last;              ^ nucleartrain.ads:143:14:VC_POSTCONDITION] [@GP_Id:39] [@model_vc_post] ( [@GP_Pretty_Ada:20497] [@GP_Sloc:nucleartrain.ads:143:14] ((Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water) = (20 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram nucleartrain.ads:139 *)
  ;
   assume {  (Nucleartrain__trainspecs___axiom.dynamic_invariant { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram nucleartrain.ads:139 *)
  ;
  () (* Check for RTE in the Pre of the subprogram nucleartrain.ads:139 *)
  ;
   begin ensures {true} let _ = (let _ = ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) && ((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water)) < (20 : int)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram nucleartrain.ads:139 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:4196] ((Standard__integer__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:4204] ((Nucleartrain__reactorwatersupply__rep.to_rep { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water) < (20 : int)) ) ) };
   try
   ( ();
   ( [@GP_Sloc:nucleartrain.adb:138:11] ([#"nucleartrain.adb" 138 0 0] ()) );
   ( [@GP_Sloc:nucleartrain.adb:138:7] ([#"nucleartrain.adb" 138 0 0] (if (( ([#"nucleartrain.adb" 138 0 0] [#"nucleartrain.adb" 138 0 0] (([@branch_id=3070] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__travelspeed)) = (0 : int)) )));
   ( [@branch_id=3070] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:nucleartrain.adb:139:10] ([#"nucleartrain.adb" 139 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:139:36] ([#"nucleartrain.adb" 139 0 0] (let temp___363 [@mlw:proxy_symbol] [@introduced] = (let temp___362 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content } in (
     ( [#"nucleartrain.adb" 139 0 0] begin ensures {true} let _ = (let _ = temp___362.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
      ()))
      in () end ;
     { ( temp___362 ) with Nucleartrain__trainspecs.__split_fields = { ( temp___362.Nucleartrain__trainspecs.__split_fields ) with Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor = (let temp___361 [@mlw:proxy_symbol] [@introduced] = { Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor in (
      ( [#"nucleartrain.adb" 139 0 0] begin ensures {true} let _ = (let _ = temp___361.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water in (
       ()))
       in () end ;
      { ( temp___361 ) with Nucleartrain__reactorspecs.__split_fields = { ( temp___361.Nucleartrain__reactorspecs.__split_fields ) with Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water = ( 20 : Nucleartrain__reactorwatersupply.reactorwatersupply ) } } )))
      } } )))
     in (
     [#"nucleartrain.adb" 139 0 0] (Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content <- ( temp___363.Nucleartrain__trainspecs.__split_fields ))))
    ) );
    ( [@GP_Sloc:nucleartrain.adb:140:10] ([#"nucleartrain.adb" 140 0 0] ()) );
    ( [@GP_Sloc:nucleartrain.adb:140:10] ([#"nucleartrain.adb" 140 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___366 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Nucleartrain__reactorwatersupply.attr__ATTRIBUTE_IMAGE((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water))))) ((5 : int))) in (
    (let temp___365 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_364.temp___String_Literal_364(())) in (
     (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___365) ((1 : int)) ((31 : int)) ((Standard__string.to_array(temp___366))) ((Standard__string.first(temp___366))) ((Standard__string.last(temp___366))))) ((1 : int)) (([#"nucleartrain.adb" 140 0 0] ( [@GP_Shape:if__call_put_line__2__concat] [@vc:annotation] [@comment:         Put_Line("Water supply has been refilled:"& train.engineReactor.water'Image);                                                    ^ nucleartrain.adb:140:52:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:38] [@GP_Sloc:nucleartrain.adb:140:52] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((31 : int))) + (Integer.length((Standard__string.first(temp___366))) ((Standard__string.last(temp___366)))))) - (1 : int)))) ))))))
    ))
    )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Nucleartrain__reactorwatersupply__rep.to_rep({ Nucleartrain__trainspecs.__split_fields = Nucleartrain__train.train__split_fields.Nucleartrain__trainspecs.__split_fields__content }.Nucleartrain__trainspecs.__split_fields.Nucleartrain__trainspecs.rec__nucleartrain__trainspecs__enginereactor.Nucleartrain__reactorspecs.__split_fields.Nucleartrain__reactorspecs.rec__nucleartrain__reactorspecs__water)) = (20 : int)) in (
   ()))
   in () end  )
end
